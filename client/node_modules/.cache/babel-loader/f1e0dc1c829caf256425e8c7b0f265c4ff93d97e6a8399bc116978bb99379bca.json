{"ast":null,"code":"var _jsxFileName = \"/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/pages/LoginPage.jsx\",\n  _s = $RefreshSig$();\n// client/src/pages/LoginPage.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { useNavigate } from \"react-router-dom\";\nimport { CustomContainer, FormControlContainer, FormInput, FormLabel, FormTitle, LoginFormContainer, SubmitButton } from '../components/pagestyles/LoginPageStyle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../redux/slice/authSlice';\nimport { fetchUserLikes } from '../redux/slice/likeSlice';\nimport { setupNotification } from '../services/notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginPage() {\n  _s();\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(state => {\n    var _state$auth;\n    return (_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.isLoggedIn;\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate(\"/\");\n    }\n  }, [isLoggedIn, navigate]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const res = await axios.post('http://localhost:4000/api/login', {\n        id,\n        password\n      });\n      if (res.status === 200) {\n        sessionStorage.setItem('accessToken', res.data.accessToken);\n        const decodedToken = jwt_decode(res.data.accessToken);\n        const userRole = res.data.userRole; // 응답으로부터 userRole 가져오기\n\n        const loggedInUserData = {\n          ...decodedToken,\n          userRole: userRole\n        };\n        localStorage.setItem(\"loggedInUser\", JSON.stringify(loggedInUserData));\n        dispatch(login({\n          userId: decodedToken.id,\n          userRole: userRole,\n          token: res.data.accessToken\n        })); // Save userId and userRole to the redux store => 이렇게 해야 useSelector(state => state.auth.userId)를 통해 로그인한 사용자ID가져올수 있을듯\n        dispatch(fetchUserLikes(decodedToken.id));\n\n        //알림 설정\n        await setupNotification(loggedInUserData);\n      }\n    } catch (error) {\n      if (error.response.status === 401) {\n        alert(error.response.data.message);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CustomContainer, {\n    children: /*#__PURE__*/_jsxDEV(LoginFormContainer, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: \"userId\",\n          children: \"\\uC544\\uC774\\uB514:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          id: \"userId\",\n          type: \"text\",\n          value: id,\n          onChange: e => setId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          htmlFor: \"password\",\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n          id: \"password\",\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n        type: \"submit\",\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"p96gMBGWhoWjCSMEe5gQf4NgUVE=\", false, function () {\n  return [useNavigate, useSelector, useDispatch];\n});\n_c = LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","jwt_decode","useNavigate","CustomContainer","FormControlContainer","FormInput","FormLabel","FormTitle","LoginFormContainer","SubmitButton","useSelector","useDispatch","login","fetchUserLikes","setupNotification","jsxDEV","_jsxDEV","LoginPage","_s","id","setId","password","setPassword","navigate","isLoggedIn","state","_state$auth","auth","dispatch","handleSubmit","e","preventDefault","res","post","status","sessionStorage","setItem","data","accessToken","decodedToken","userRole","loggedInUserData","localStorage","JSON","stringify","userId","token","error","response","alert","message","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/pages/LoginPage.jsx"],"sourcesContent":["// client/src/pages/LoginPage.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { useNavigate } from \"react-router-dom\";\nimport { CustomContainer, FormControlContainer, FormInput, FormLabel, FormTitle, LoginFormContainer, SubmitButton } from '../components/pagestyles/LoginPageStyle';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { login } from '../redux/slice/authSlice';\nimport { fetchUserLikes } from '../redux/slice/likeSlice';\nimport { setupNotification } from '../services/notifications'; \n\nexport default function LoginPage() {\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector((state) => state.auth?.isLoggedIn);\n  \n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    if (isLoggedIn) {\n        navigate(\"/\");\n    }\n  }, [isLoggedIn, navigate]);\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    try {\n      const res = await axios.post('http://localhost:4000/api/login', {\n        id,\n        password,\n      });\n  \n      if (res.status === 200) {\n        sessionStorage.setItem('accessToken', res.data.accessToken);\n  \n        const decodedToken = jwt_decode(res.data.accessToken);\n        const userRole = res.data.userRole; // 응답으로부터 userRole 가져오기\n\n        const loggedInUserData = {\n          ...decodedToken,\n          userRole: userRole,\n        };\n        \n        localStorage.setItem(\"loggedInUser\", JSON.stringify(loggedInUserData)); \n\n        dispatch(login({ userId: decodedToken.id, userRole: userRole, token: res.data.accessToken })); // Save userId and userRole to the redux store => 이렇게 해야 useSelector(state => state.auth.userId)를 통해 로그인한 사용자ID가져올수 있을듯\n        dispatch(fetchUserLikes(decodedToken.id));\n\n         //알림 설정\n        await setupNotification(loggedInUserData);\n      }\n    } catch (error) {\n      if (error.response.status === 401) {\n        alert(error.response.data.message);\n      }\n    }\n  };\n\n  \n  return (\n    <CustomContainer>\n      <LoginFormContainer onSubmit={handleSubmit}>\n        <FormTitle>로그인</FormTitle>\n        <FormControlContainer>\n          <FormLabel htmlFor='userId'>아이디:</FormLabel>\n          <FormInput id='userId' type=\"text\" value={id} onChange={(e) => setId(e.target.value)} />\n        </FormControlContainer>\n        <FormControlContainer>\n          <FormLabel htmlFor='password'>비밀번호:</FormLabel>\n          <FormInput\n            id='password'\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </FormControlContainer>\n        <SubmitButton type=\"submit\">로그인</SubmitButton>\n      </LoginFormContainer>\n    </CustomContainer>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,EAAEC,oBAAoB,EAAEC,SAAS,EAAEC,SAAS,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,yCAAyC;AAClK,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,iBAAiB,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMyB,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAMsB,UAAU,GAAGd,WAAW,CAAEe,KAAK;IAAA,IAAAC,WAAA;IAAA,QAAAA,WAAA,GAAKD,KAAK,CAACE,IAAI,cAAAD,WAAA,uBAAVA,WAAA,CAAYF,UAAU;EAAA,EAAC;EAEjE,MAAMI,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAE9BZ,SAAS,CAAC,MAAM;IACd,IAAIyB,UAAU,EAAE;MACZD,QAAQ,CAAC,GAAG,CAAC;IACjB;EACF,CAAC,EAAE,CAACC,UAAU,EAAED,QAAQ,CAAC,CAAC;EAG1B,MAAMM,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMhC,KAAK,CAACiC,IAAI,CAAC,iCAAiC,EAAE;QAC9Dd,EAAE;QACFE;MACF,CAAC,CAAC;MAEF,IAAIW,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;QACtBC,cAAc,CAACC,OAAO,CAAC,aAAa,EAAEJ,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC;QAE3D,MAAMC,YAAY,GAAGtC,UAAU,CAAC+B,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC;QACrD,MAAME,QAAQ,GAAGR,GAAG,CAACK,IAAI,CAACG,QAAQ,CAAC,CAAC;;QAEpC,MAAMC,gBAAgB,GAAG;UACvB,GAAGF,YAAY;UACfC,QAAQ,EAAEA;QACZ,CAAC;QAEDE,YAAY,CAACN,OAAO,CAAC,cAAc,EAAEO,IAAI,CAACC,SAAS,CAACH,gBAAgB,CAAC,CAAC;QAEtEb,QAAQ,CAAChB,KAAK,CAAC;UAAEiC,MAAM,EAAEN,YAAY,CAACpB,EAAE;UAAEqB,QAAQ,EAAEA,QAAQ;UAAEM,KAAK,EAAEd,GAAG,CAACK,IAAI,CAACC;QAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/FV,QAAQ,CAACf,cAAc,CAAC0B,YAAY,CAACpB,EAAE,CAAC,CAAC;;QAExC;QACD,MAAML,iBAAiB,CAAC2B,gBAAgB,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,QAAQ,CAACd,MAAM,KAAK,GAAG,EAAE;QACjCe,KAAK,CAACF,KAAK,CAACC,QAAQ,CAACX,IAAI,CAACa,OAAO,CAAC;MACpC;IACF;EACF,CAAC;EAGD,oBACElC,OAAA,CAACb,eAAe;IAAAgD,QAAA,eACdnC,OAAA,CAACR,kBAAkB;MAAC4C,QAAQ,EAAEvB,YAAa;MAAAsB,QAAA,gBACzCnC,OAAA,CAACT,SAAS;QAAA4C,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC,eAC1BxC,OAAA,CAACZ,oBAAoB;QAAA+C,QAAA,gBACnBnC,OAAA,CAACV,SAAS;UAACmD,OAAO,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAC5CxC,OAAA,CAACX,SAAS;UAACc,EAAE,EAAC,QAAQ;UAACuC,IAAI,EAAC,MAAM;UAACC,KAAK,EAAExC,EAAG;UAACyC,QAAQ,EAAG9B,CAAC,IAAKV,KAAK,CAACU,CAAC,CAAC+B,MAAM,CAACF,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CAAC,eACvBxC,OAAA,CAACZ,oBAAoB;QAAA+C,QAAA,gBACnBnC,OAAA,CAACV,SAAS;UAACmD,OAAO,EAAC,UAAU;UAAAN,QAAA,EAAC;QAAK;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC,eAC/CxC,OAAA,CAACX,SAAS;UACRc,EAAE,EAAC,UAAU;UACbuC,IAAI,EAAC,UAAU;UACfC,KAAK,EAAEtC,QAAS;UAChBuC,QAAQ,EAAG9B,CAAC,IAAKR,WAAW,CAACQ,CAAC,CAAC+B,MAAM,CAACF,KAAK;QAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACkB,CAAC,eACvBxC,OAAA,CAACP,YAAY;QAACiD,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEtB;AAACtC,EAAA,CAzEuBD,SAAS;EAAA,QAIdf,WAAW,EACTQ,WAAW,EAEbC,WAAW;AAAA;AAAAmD,EAAA,GAPN7C,SAAS;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}