{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// const axios = require('axios');\n\nimport axios from 'axios';\n\n//좋아요 초기 상태\nconst initialState = {\n  likes: {}\n};\n\n//해당 아이디 좋아요 가져오기\nexport const fetchUserLikes = createAsyncThunk(\"likes/fetchUserLikes\", async user_id => {\n  try {\n    const response = await axios.get(`/api/like/${user_id}`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`fetchLikeHotels`, error);\n  }\n});\n\n//좋아요 누르기\nexport const updateLike = createAsyncThunk(\"likes/updateLike\", async ({\n  hotel_id,\n  user_id,\n  addLike\n}) => {\n  try {\n    const response = await axios.post(\"/api/like\", {\n      hotel_id,\n      user_id,\n      addLike\n    });\n    return {\n      hotel_id,\n      liked: addLike\n    };\n  } catch (error) {\n    console.error(\"updateLike\", error);\n  }\n});\nconst likeSlice = createSlice({\n  name: \"likes\",\n  initialState,\n  reducers: {\n    resetLikes: state => {\n      state.likes = {};\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUserLikes.fulfilled, (state, action) => {\n      if (action.payload) {\n        action.payload.forEach(hotel => {\n          state.likes[hotel.hotel_id] = hotel;\n        });\n      }\n    });\n    builder.addCase(updateLike.fulfilled, (state, action) => {\n      const {\n        hotel_id,\n        liked\n      } = action.payload;\n      if (liked) {\n        //true\n        //ture로 likes객체에 hotel_id 저장\n        state.likes[hotel_id] = true;\n      } else {\n        //아니면 삭제\n        delete state.likes[hotel_id];\n      }\n    });\n  }\n});\nexport const {\n  resetLikes\n} = likeSlice.actions;\nexport default likeSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","likes","fetchUserLikes","user_id","response","get","console","log","data","error","updateLike","hotel_id","addLike","post","liked","likeSlice","name","reducers","resetLikes","state","extraReducers","builder","addCase","fulfilled","action","payload","forEach","hotel","actions","reducer"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/redux/slice/likeSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n// const axios = require('axios');\n\nimport axios from 'axios';\n\n\n//좋아요 초기 상태\nconst initialState = {\n  likes: {},\n};\n\n//해당 아이디 좋아요 가져오기\nexport const fetchUserLikes = createAsyncThunk(\n  \"likes/fetchUserLikes\",\n  async (user_id) => {\n    try {\n      const response = await axios.get(`/api/like/${user_id}`);\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`fetchLikeHotels`, error);\n    }\n  }\n);\n\n//좋아요 누르기\nexport const updateLike = createAsyncThunk(\n  \"likes/updateLike\",\n  async ({ hotel_id, user_id, addLike }) => {\n    try {\n      const response = await axios.post(\"/api/like\", {\n        hotel_id,\n        user_id,\n        addLike,\n      });\n      return { hotel_id, liked: addLike };\n    } catch (error) {\n      console.error(\"updateLike\", error);\n    }\n  }\n);\n\nconst likeSlice = createSlice({\n  name: \"likes\",\n  initialState,\n  reducers: {\n    resetLikes: (state) => {\n      state.likes = {};\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchUserLikes.fulfilled, (state, action) => {\n      if (action.payload) {\n        action.payload.forEach((hotel) => {\n          state.likes[hotel.hotel_id] = hotel;\n        });\n      }\n    });\n    builder.addCase(updateLike.fulfilled, (state, action) => {\n      const { hotel_id, liked } = action.payload;\n      if (liked) {\n        //true\n        //ture로 likes객체에 hotel_id 저장\n        state.likes[hotel_id] = true;\n      } else {\n        //아니면 삭제\n        delete state.likes[hotel_id];\n      }\n    });\n  },\n});\n\nexport const { resetLikes } = likeSlice.actions;\n\nexport default likeSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE;;AAEA,OAAOC,KAAK,MAAM,OAAO;;AAGzB;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;AACV,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGJ,gBAAgB,CAC5C,sBAAsB,EACtB,MAAOK,OAAO,IAAK;EACjB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAE,aAAYF,OAAQ,EAAC,CAAC;IACxDG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;IAC1B,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAE,iBAAgB,EAAEA,KAAK,CAAC;EACzC;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CACxC,kBAAkB,EAClB,OAAO;EAAEa,QAAQ;EAAER,OAAO;EAAES;AAAQ,CAAC,KAAK;EACxC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAML,KAAK,CAACc,IAAI,CAAC,WAAW,EAAE;MAC7CF,QAAQ;MACRR,OAAO;MACPS;IACF,CAAC,CAAC;IACF,OAAO;MAAED,QAAQ;MAAEG,KAAK,EAAEF;IAAQ,CAAC;EACrC,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EACpC;AACF,CACF,CAAC;AAED,MAAMM,SAAS,GAAGlB,WAAW,CAAC;EAC5BmB,IAAI,EAAE,OAAO;EACbhB,YAAY;EACZiB,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAAClB,KAAK,GAAG,CAAC,CAAC;IAClB;EACF,CAAC;EACDmB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACpB,cAAc,CAACqB,SAAS,EAAE,CAACJ,KAAK,EAAEK,MAAM,KAAK;MAC3D,IAAIA,MAAM,CAACC,OAAO,EAAE;QAClBD,MAAM,CAACC,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;UAChCR,KAAK,CAAClB,KAAK,CAAC0B,KAAK,CAAChB,QAAQ,CAAC,GAAGgB,KAAK;QACrC,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACZ,UAAU,CAACa,SAAS,EAAE,CAACJ,KAAK,EAAEK,MAAM,KAAK;MACvD,MAAM;QAAEb,QAAQ;QAAEG;MAAM,CAAC,GAAGU,MAAM,CAACC,OAAO;MAC1C,IAAIX,KAAK,EAAE;QACT;QACA;QACAK,KAAK,CAAClB,KAAK,CAACU,QAAQ,CAAC,GAAG,IAAI;MAC9B,CAAC,MAAM;QACL;QACA,OAAOQ,KAAK,CAAClB,KAAK,CAACU,QAAQ,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEO;AAAW,CAAC,GAAGH,SAAS,CAACa,OAAO;AAE/C,eAAeb,SAAS,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}