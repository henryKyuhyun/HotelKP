{"ast":null,"code":"// // client/src/pages/HotelListPage.jsx\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { HotelListContainer, HotelListWrapper, HotelSortButton, HotelSortContainer, Line } from \"../components/pagestyles/HotelListStyle\";\n// import HotelCard from '../components/hotel/HotelCard';\n// import SearchBar from \"../components/hotel/search/SearchBar\";\n// import HotelComparison from \"../components/hotel/comparison/HotelComparison\";\n// import MainCategory from \"../components/main/MainCategory\";\n\n// export default function HotelListPage() {\n//   const { accommodationType } = useParams();\n//   const [hotels, setHotels] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedHotelIds, setSelectedHotelIds] = useState([]);\n\n//   const fetchHotels = async (type) => {\n\n//     try {\n//       const response = await axios.get(`/api/hotelList?hotelType=${type}&searchTerm=${searchTerm}`);\n//       setHotels(response.data);\n//     } catch (error) {\n//       console.error(`Error fetching hotels: ${error}`);\n//       setError(\"호텔목록 불러오는데 실패\");\n//     }\n//   };\n\n//   const handleHotelSelect = (hotelId, isSelected) => {\n//     setSelectedHotelIds((prevSelectedHotelIds) =>\n//       isSelected\n//         ? [...prevSelectedHotelIds, hotelId]\n//         : prevSelectedHotelIds.filter((id) => id !== hotelId)\n//     );\n//   };\n\n//   useEffect(() => {\n//     fetchHotels(accommodationType);\n//   }, [accommodationType, searchTerm]);\n\n//   useEffect(() => {\n//     fetchHotels(\"all\");\n//   }, [searchTerm]);\n\n//   const sortHotels =(property)=> {\n//     let copy = [...hotels]\n//     copy.sort((a,b)=> {\n//       if(a[property] > b[property]) return -1\n//       if(a[property] < b[property]) return 1\n//       setHotels(copy)\n//     })\n//   }\n\n//   return (\n//     <HotelListContainer>\n//       <SearchBar onSearch={setSearchTerm} />\n//       <MainCategory />\n\n//       <Line />\n\n//       <HotelSortContainer>\n//         <HotelSortButton onClick={() => sortHotels('comments')}>댓글순</HotelSortButton>\n//         <HotelSortButton onClick={() => sortHotels('average_score')}>별점순</HotelSortButton>\n//         <HotelSortButton onClick={() => sortHotels('price')}>가격순</HotelSortButton>\n//       </HotelSortContainer>\n\n//       <HotelListWrapper>\n//       {hotels.map((hotel) => (\n//         <HotelCard\n//           key={hotel.hotel_id}\n//           hotel={hotel}\n//           showEditButton={true}\n//           onHotelSelect={handleHotelSelect}\n//           // average_score={true}\n//         />\n//       ))}\n//       {error && <p>{error}</p>}\n//       </HotelListWrapper>\n\n//         <HotelComparison selectedHotelIds={selectedHotelIds} />\n//     </HotelListContainer>\n//   );\n// }","map":{"version":3,"names":[],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/pages/HotelListPage.jsx"],"sourcesContent":["// // client/src/pages/HotelListPage.jsx\n// import axios from \"axios\";\n// import { useEffect, useState } from \"react\";\n// import { useParams } from \"react-router-dom\";\n// import { HotelListContainer, HotelListWrapper, HotelSortButton, HotelSortContainer, Line } from \"../components/pagestyles/HotelListStyle\";\n// import HotelCard from '../components/hotel/HotelCard';\n// import SearchBar from \"../components/hotel/search/SearchBar\";\n// import HotelComparison from \"../components/hotel/comparison/HotelComparison\";\n// import MainCategory from \"../components/main/MainCategory\";\n\n// export default function HotelListPage() {\n//   const { accommodationType } = useParams();\n//   const [hotels, setHotels] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedHotelIds, setSelectedHotelIds] = useState([]);\n\n//   const fetchHotels = async (type) => {\n    \n//     try {\n//       const response = await axios.get(`/api/hotelList?hotelType=${type}&searchTerm=${searchTerm}`);\n//       setHotels(response.data);\n//     } catch (error) {\n//       console.error(`Error fetching hotels: ${error}`);\n//       setError(\"호텔목록 불러오는데 실패\");\n//     }\n//   };\n\n//   const handleHotelSelect = (hotelId, isSelected) => {\n//     setSelectedHotelIds((prevSelectedHotelIds) =>\n//       isSelected\n//         ? [...prevSelectedHotelIds, hotelId]\n//         : prevSelectedHotelIds.filter((id) => id !== hotelId)\n//     );\n//   };\n\n//   useEffect(() => {\n//     fetchHotels(accommodationType);\n//   }, [accommodationType, searchTerm]);\n\n//   useEffect(() => {\n//     fetchHotels(\"all\");\n//   }, [searchTerm]);\n\n  \n//   const sortHotels =(property)=> {\n//     let copy = [...hotels]\n//     copy.sort((a,b)=> {\n//       if(a[property] > b[property]) return -1\n//       if(a[property] < b[property]) return 1\n//       setHotels(copy)\n//     })\n//   }\n\n//   return (\n//     <HotelListContainer>\n//       <SearchBar onSearch={setSearchTerm} />\n//       <MainCategory />\n\n//       <Line />\n\n//       <HotelSortContainer>\n//         <HotelSortButton onClick={() => sortHotels('comments')}>댓글순</HotelSortButton>\n//         <HotelSortButton onClick={() => sortHotels('average_score')}>별점순</HotelSortButton>\n//         <HotelSortButton onClick={() => sortHotels('price')}>가격순</HotelSortButton>\n//       </HotelSortContainer>\n\n//       <HotelListWrapper>\n//       {hotels.map((hotel) => (\n//         <HotelCard\n//           key={hotel.hotel_id}\n//           hotel={hotel}\n//           showEditButton={true}\n//           onHotelSelect={handleHotelSelect}\n//           // average_score={true}\n//         />\n//       ))}\n//       {error && <p>{error}</p>}\n//       </HotelListWrapper>\n      \n//         <HotelComparison selectedHotelIds={selectedHotelIds} />\n//     </HotelListContainer>\n//   );\n// }"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}