{"ast":null,"code":"var _jsxFileName = \"/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx\",\n  _s = $RefreshSig$();\n//성공본 Final\n//client/src/components/chat/Chat.jsx \nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\";\nimport { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:4000\";\nexport default function Chat() {\n  _s();\n  var _chatRooms$activeChat;\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector(state => state.auth.userRole);\n  const userId = useSelector(state => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({}); // Add this line\n\n  const [chatOpen, setChatOpen] = useState(true); // 채팅창 열림/닫힘 상태를 추가합니다.\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    setSocket(socket);\n    socket.emit('register', {\n      role: userRole,\n      userId\n    });\n    socket.on('chat message', message => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        // [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole, message: message.message }],\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), {\n          userId: message.userId,\n          role: userRole === 'user' ? 'user' : 'hotel_admin',\n          message: message.message\n        }]\n      }));\n    });\n    socket.on('connected users', userIds => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n    socket.on('all chat rooms', allChatRooms => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({\n        ...rooms,\n        [roomId]: []\n      }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n    socket.on('chat history', history => {\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history\n      }));\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const startSiteAdminChat = userId => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {\n      chatRoomId\n    }); //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: connectedUsers.map(user => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => startSiteAdminChat(user),\n        children: [\"Chat with \", user]\n      }, user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  };\n  const startChatWithUser = userId => {\n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('fetch messages', {\n      chatRoomId\n    });\n  };\n  const sendMessage = () => {\n    if (!socket) return;\n    let chatRoomId;\n    let receiverUserId;\n\n    // If the sender is a site admin, set the receiver and chat room based on the selected user.\n    // Otherwise, set them as the site admin by default.\n    if (userRole === 'site_admin' && selectedUser) {\n      chatRoomId = `${selectedUser}_site_admin`;\n      receiverUserId = selectedUser;\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    } else {\n      chatRoomId = `${userId}_site_admin`;\n      receiverUserId = 'site_admin';\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    }\n\n    socket.emit('chat message', {\n      userId,\n      role: userRole,\n      receiverUserId,\n      message,\n      chatRoomId: activeChatRoomId\n    });\n    setMessage('');\n  };\n  const isAdmin = userRole === \"site_admin\";\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    isSiteAdmin: isAdmin,\n    children: [/*#__PURE__*/_jsxDEV(ChatRoomContainer, {\n      isSiteAdmin: isAdmin,\n      children: [isAdmin && renderSiteAdminChatButtons(), isAdmin && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"Select a chat room:\", Object.keys(chatRooms).map(chatRoomId => activeChatRoomId !== chatRoomId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\" \", \"|\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              cursor: \"pointer\"\n            },\n            onClick: () => {\n              const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n              setSelectedUser(userId);\n              startChatWithUser(userId);\n            },\n            children: chatRoomId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), \" \", \"|\"]\n        }, void 0, true) : null)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(MessagesContainer, {\n      children: [(_chatRooms$activeChat = chatRooms[activeChatRoomId]) === null || _chatRooms$activeChat === void 0 ? void 0 : _chatRooms$activeChat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.userId, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 7\n        }, this), \" \", msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 5\n      }, this)), /*#__PURE__*/_jsxDEV(MessageInputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageInput, {\n          type: \"text\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(SendMessageButton, {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n}\n_s(Chat, \"oPClkDBjmohz7KTSYwplaiM7sVc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","socketIOClient","ChatContainer","ChatRoomContainer","MessagesContainer","MessageInput","MessageInputContainer","SendMessageButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Chat","_s","_chatRooms$activeChat","message","setMessage","socket","setSocket","response","setResponse","userRole","state","auth","userId","connectedUsers","setConnectedUsers","activeChatRoomId","setActiveChatRoomId","selectedUser","setSelectedUser","chatRooms","setChatRooms","chatOpen","setChatOpen","emit","role","on","console","log","chatRoomId","prevChatRooms","userIds","allChatRooms","reduce","rooms","roomId","history","disconnect","startSiteAdminChat","renderSiteAdminChatButtons","children","map","user","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startChatWithUser","sendMessage","receiverUserId","isAdmin","isSiteAdmin","Object","keys","style","cursor","split","msg","index","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx"],"sourcesContent":["\n//성공본 Final\n//client/src/components/chat/Chat.jsx \nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\"; \nimport { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\nconst ENDPOINT = \"http://localhost:4000\"; \n\nexport default function Chat() {\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector((state) => state.auth.userRole);\n  const userId = useSelector((state) => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({}); // Add this line\n\n  const [chatOpen, setChatOpen] = useState(true); // 채팅창 열림/닫힘 상태를 추가합니다.\n\n  \n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT); \n    setSocket(socket);\n\n    socket.emit('register', { role: userRole, userId });\n    \n    socket.on('chat message', (message) => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        // [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole, message: message.message }],\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n      }));\n    });\n\n    socket.on('connected users', (userIds) => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n\n    socket.on('all chat rooms', (allChatRooms) => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n\n    socket.on('chat history', (history) => {\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history,\n      }));\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n\n  const startSiteAdminChat = (userId) => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {chatRoomId});  //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return (\n      <div>\n        {connectedUsers.map((user) => (\n          <button key={user} onClick={() => startSiteAdminChat(user)}>\n            Chat with {user}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const startChatWithUser = (userId) => {\n  \n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n\n    socket.emit('fetch messages', { chatRoomId });\n};\n\n\nconst sendMessage = () => {\n  if (!socket) return;\n\n  let chatRoomId;\n  let receiverUserId;\n\n  // If the sender is a site admin, set the receiver and chat room based on the selected user.\n  // Otherwise, set them as the site admin by default.\n  if (userRole === 'site_admin' && selectedUser) {\n    chatRoomId = `${selectedUser}_site_admin`;\n    receiverUserId = selectedUser;\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  } else {\n    chatRoomId = `${userId}_site_admin`;\n    receiverUserId = 'site_admin';\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  }\n\n  \n  socket.emit('chat message', {\n    userId,\n    role: userRole,\n    receiverUserId,\n    message,\n    chatRoomId: activeChatRoomId,\n  });\n\n  setMessage('');\n\n};\n\nconst isAdmin = userRole === \"site_admin\";\n\nreturn (\n  <ChatContainer isSiteAdmin={isAdmin}>\n    <ChatRoomContainer isSiteAdmin={isAdmin}>\n      {/* Render Site Admin chat buttons for Users */}\n      {isAdmin && renderSiteAdminChatButtons()}\n\n      {/* Chat Room Selection */}\n      {isAdmin && (\n        <>\n          Select a chat room:\n          {Object.keys(chatRooms).map((chatRoomId) =>\n            activeChatRoomId !== chatRoomId ? (\n              <>\n                {\" \"}\n                |{\" \"}\n                <span style={{ cursor: \"pointer\"}} onClick={() => {\n                  const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n                  setSelectedUser(userId)\n                  startChatWithUser(userId);\n                }}>{chatRoomId}\n                </span>{\" \"}\n                |\n              </>\n            ) : null\n          )}\n        </>\n      )}\n    </ChatRoomContainer>\n\n    {/* Messages */}\n    <MessagesContainer>\n  {chatRooms[activeChatRoomId]?.map((msg, index) => (\n    <div key={index}>\n      <strong>{msg.userId}:</strong> {msg.message}\n    </div>\n  ))}\n{/* Message input */}\n<MessageInputContainer>\n    <MessageInput\n      type=\"text\"\n      value={message}\n      onChange={(e) => setMessage(e.target.value)}\n    />\n    <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n  </MessageInputContainer>\n</MessagesContainer>\n  </ChatContainer>\n);\n}\n"],"mappings":";;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,iBAAiB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtJ,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMuB,QAAQ,GAAGtB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAGzB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC;EACxD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC6B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC+B,YAAY,EAAEC,eAAe,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhD,MAAM,CAACmC,QAAQ,EAAEC,WAAW,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAGhDD,SAAS,CAAC,MAAM;IACd,MAAMoB,MAAM,GAAGjB,cAAc,CAACW,QAAQ,CAAC;IACvCO,SAAS,CAACD,MAAM,CAAC;IAEjBA,MAAM,CAACkB,IAAI,CAAC,UAAU,EAAE;MAAEC,IAAI,EAAEf,QAAQ;MAAEG;IAAO,CAAC,CAAC;IAEnDP,MAAM,CAACoB,EAAE,CAAC,cAAc,EAAGtB,OAAO,IAAK;MACrCuB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAExB,OAAO,CAAC;MAC9C,IAAIY,gBAAgB,KAAK,IAAI,EAAE;QAC7BC,mBAAmB,CAACb,OAAO,CAACyB,UAAU,CAAC;MACzC;MAEAR,YAAY,CAAES,aAAa,KAAM;QAC/B,GAAGA,aAAa;QAChB;QACA,CAAC1B,OAAO,CAACyB,UAAU,GAAG,CAAC,IAAIC,aAAa,CAAC1B,OAAO,CAACyB,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;UAAEhB,MAAM,EAAET,OAAO,CAACS,MAAM;UAAEY,IAAI,EAAEf,QAAQ,KAAK,MAAM,GAAG,MAAM,GAAG,aAAa;UAAEN,OAAO,EAAEA,OAAO,CAACA;QAAQ,CAAC;MAE/K,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEFE,MAAM,CAACoB,EAAE,CAAC,iBAAiB,EAAGK,OAAO,IAAK;MACxCJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,OAAO,CAAC;MACxChB,iBAAiB,CAACgB,OAAO,CAAC;IAC5B,CAAC,CAAC;IAEFzB,MAAM,CAACoB,EAAE,CAAC,gBAAgB,EAAGM,YAAY,IAAK;MAC5CX,YAAY,CAACW,YAAY,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,MAAM,MAAM;QAAE,GAAGD,KAAK;QAAE,CAACC,MAAM,GAAG;MAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACtFR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,YAAY,CAAC;IACvD,CAAC,CAAC;IAEF1B,MAAM,CAACoB,EAAE,CAAC,cAAc,EAAGU,OAAO,IAAK;MACrCf,YAAY,CAAES,aAAa,KAAM;QAC/B,GAAGA,aAAa;QAChB,CAACd,gBAAgB,GAAGoB;MACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAM;MACX9B,MAAM,CAAC+B,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,kBAAkB,GAAIzB,MAAM,IAAK;IACrC,MAAMgB,UAAU,GAAI,GAAEhB,MAAO,aAAY;IACzCI,mBAAmB,CAACY,UAAU,CAAC;IAC/BvB,MAAM,CAACkB,IAAI,CAAC,gBAAgB,EAAE;MAACK;IAAU,CAAC,CAAC,CAAC,CAAE;EAChD,CAAC;;EAED,MAAMU,0BAA0B,GAAGA,CAAA,KAAM;IACvC,oBACE1C,OAAA;MAAA2C,QAAA,EACG1B,cAAc,CAAC2B,GAAG,CAAEC,IAAI,iBACvB7C,OAAA;QAAmB8C,OAAO,EAAEA,CAAA,KAAML,kBAAkB,CAACI,IAAI,CAAE;QAAAF,QAAA,GAAC,YAChD,EAACE,IAAI;MAAA,GADJA,IAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMC,iBAAiB,GAAInC,MAAM,IAAK;IAEpCM,eAAe,CAACN,MAAM,CAAC;IACvB,MAAMgB,UAAU,GAAI,GAAEhB,MAAO,aAAY;IACzCI,mBAAmB,CAACY,UAAU,CAAC;IAE/BvB,MAAM,CAACkB,IAAI,CAAC,gBAAgB,EAAE;MAAEK;IAAW,CAAC,CAAC;EACjD,CAAC;EAGD,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC3C,MAAM,EAAE;IAEb,IAAIuB,UAAU;IACd,IAAIqB,cAAc;;IAElB;IACA;IACA,IAAIxC,QAAQ,KAAK,YAAY,IAAIQ,YAAY,EAAE;MAC7CW,UAAU,GAAI,GAAEX,YAAa,aAAY;MACzCgC,cAAc,GAAGhC,YAAY;MAC7BD,mBAAmB,CAACY,UAAU,CAAC,CAAC,CAAC;IACnC,CAAC,MAAM;MACLA,UAAU,GAAI,GAAEhB,MAAO,aAAY;MACnCqC,cAAc,GAAG,YAAY;MAC7BjC,mBAAmB,CAACY,UAAU,CAAC,CAAC,CAAC;IACnC;;IAGAvB,MAAM,CAACkB,IAAI,CAAC,cAAc,EAAE;MAC1BX,MAAM;MACNY,IAAI,EAAEf,QAAQ;MACdwC,cAAc;MACd9C,OAAO;MACPyB,UAAU,EAAEb;IACd,CAAC,CAAC;IAEFX,UAAU,CAAC,EAAE,CAAC;EAEhB,CAAC;EAED,MAAM8C,OAAO,GAAGzC,QAAQ,KAAK,YAAY;EAEzC,oBACEb,OAAA,CAACP,aAAa;IAAC8D,WAAW,EAAED,OAAQ;IAAAX,QAAA,gBAClC3C,OAAA,CAACN,iBAAiB;MAAC6D,WAAW,EAAED,OAAQ;MAAAX,QAAA,GAErCW,OAAO,IAAIZ,0BAA0B,CAAC,CAAC,EAGvCY,OAAO,iBACNtD,OAAA,CAAAE,SAAA;QAAAyC,QAAA,GAAE,qBAEA,EAACa,MAAM,CAACC,IAAI,CAAClC,SAAS,CAAC,CAACqB,GAAG,CAAEZ,UAAU,IACrCb,gBAAgB,KAAKa,UAAU,gBAC7BhC,OAAA,CAAAE,SAAA;UAAAyC,QAAA,GACG,GAAG,EAAC,GACJ,EAAC,GAAG,eACL3C,OAAA;YAAM0D,KAAK,EAAE;cAAEC,MAAM,EAAE;YAAS,CAAE;YAACb,OAAO,EAAEA,CAAA,KAAM;cAChD,MAAM9B,MAAM,GAAGgB,UAAU,CAAC4B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cACzCtC,eAAe,CAACN,MAAM,CAAC;cACvBmC,iBAAiB,CAACnC,MAAM,CAAC;YAC3B,CAAE;YAAA2B,QAAA,EAAEX;UAAU;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,EAAC,GAAG,EAAC,GAEd;QAAA,eAAE,CAAC,GACD,IACN,CAAC;MAAA,eACD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACgB,CAAC,eAGpBlD,OAAA,CAACL,iBAAiB;MAAAgD,QAAA,IAAArC,qBAAA,GACnBiB,SAAS,CAACJ,gBAAgB,CAAC,cAAAb,qBAAA,uBAA3BA,qBAAA,CAA6BsC,GAAG,CAAC,CAACiB,GAAG,EAAEC,KAAK,kBAC3C9D,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,GAASkB,GAAG,CAAC7C,MAAM,EAAC,GAAC;QAAA;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACW,GAAG,CAACtD,OAAO;MAAA,GADnCuD,KAAK;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN,CAAC,eAEJlD,OAAA,CAACH,qBAAqB;QAAA8C,QAAA,gBAClB3C,OAAA,CAACJ,YAAY;UACXmE,IAAI,EAAC,MAAM;UACXC,KAAK,EAAEzD,OAAQ;UACf0D,QAAQ,EAAGC,CAAC,IAAK1D,UAAU,CAAC0D,CAAC,CAACC,MAAM,CAACH,KAAK;QAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C,CAAC,eACFlD,OAAA,CAACF,iBAAiB;UAACgD,OAAO,EAAEM,WAAY;UAAAT,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAElB;AAAC7C,EAAA,CAtKuBD,IAAI;EAAA,QAITb,WAAW,EACbA,WAAW;AAAA;AAAA6E,EAAA,GALJhE,IAAI;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}