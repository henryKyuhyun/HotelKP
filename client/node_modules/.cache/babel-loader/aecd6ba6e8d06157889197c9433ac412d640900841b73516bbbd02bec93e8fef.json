{"ast":null,"code":"// // src/redux/slice/hotelSlice.js\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import { fetchMyHotels } from \"../hotelActions\";\n\n// const initialState = {\n//   myHotels: {},\n//   status: \"idle\",\n//   error: null,\n// };\n\n// const hotelSlice = createSlice({\n//   name: \"hotels\",\n//   initialState,\n//   reducers: {\n//     // 다른 리듀서들\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchMyHotels.pending, (state) => {\n//         state.status = \"loading\";\n//       })\n//       .addCase(fetchMyHotels.fulfilled, (state, action) => {\n//         state.status = \"succeeded\";\n//         state.myHotels = Object.fromEntries(\n//           action.payload.map((h) => [h.hotel_id, h])\n//         );\n//       })\n//       .addCase(fetchMyHotels.rejected, (state, action) => {\n//         state.status = \"failed\";\n//         state.error = action.error.message;\n//       });\n//   },\n// });\n\n// // 다른 action 내보내기\n// export default hotelSlice.reducer;\n\n// src/redux/slice/hotelSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMyHotels, deleteHotel } from \"../hotelActions\";\nconst initialState = {\n  myHotels: {},\n  status: \"idle\",\n  error: null\n};\nconst hotelSlice = createSlice({\n  name: \"hotels\",\n  initialState,\n  reducers: {\n    // 다른 리듀서들\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMyHotels.pending, state => {\n      state.status = \"loading\";\n    }).addCase(fetchMyHotels.fulfilled, (state, action) => {\n      state.status = \"succeeded\";\n      state.myHotels = Object.fromEntries(action.payload.map(h => [h.hotel_id, h]));\n    }).addCase(fetchMyHotels.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    }).addCase(deleteHotel.fulfilled, (state, action) => {\n      console.log('226', state.myHotels);\n      delete state.myHotels[action.payload.hotel_id];\n    });\n  }\n});\n\n// 다른 action 내보내기\nexport default hotelSlice.reducer;","map":{"version":3,"names":["createSlice","fetchMyHotels","deleteHotel","initialState","myHotels","status","error","hotelSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","Object","fromEntries","payload","map","h","hotel_id","rejected","message","console","log","reducer"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/redux/slice/hotelSlice.js"],"sourcesContent":["// // src/redux/slice/hotelSlice.js\n// import { createSlice } from \"@reduxjs/toolkit\";\n// import { fetchMyHotels } from \"../hotelActions\";\n\n// const initialState = {\n//   myHotels: {},\n//   status: \"idle\",\n//   error: null,\n// };\n\n// const hotelSlice = createSlice({\n//   name: \"hotels\",\n//   initialState,\n//   reducers: {\n//     // 다른 리듀서들\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchMyHotels.pending, (state) => {\n//         state.status = \"loading\";\n//       })\n//       .addCase(fetchMyHotels.fulfilled, (state, action) => {\n//         state.status = \"succeeded\";\n//         state.myHotels = Object.fromEntries(\n//           action.payload.map((h) => [h.hotel_id, h])\n//         );\n//       })\n//       .addCase(fetchMyHotels.rejected, (state, action) => {\n//         state.status = \"failed\";\n//         state.error = action.error.message;\n//       });\n//   },\n// });\n\n// // 다른 action 내보내기\n// export default hotelSlice.reducer;\n\n\n// src/redux/slice/hotelSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMyHotels, deleteHotel } from \"../hotelActions\";\n\nconst initialState = {\n  myHotels: {},\n  status: \"idle\",\n  error: null,\n};\n\nconst hotelSlice = createSlice({\n  name: \"hotels\",\n  initialState,\n  reducers: {\n    // 다른 리듀서들\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMyHotels.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchMyHotels.fulfilled, (state, action) => {\n        state.status = \"succeeded\";\n        state.myHotels = Object.fromEntries(\n          action.payload.map((h) => [h.hotel_id, h])\n        );\n      })\n      .addCase(fetchMyHotels.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.error.message;\n      })\n      .addCase(deleteHotel.fulfilled, (state, action) => {\n        console.log('226' ,state.myHotels)\n        delete state.myHotels[action.payload.hotel_id]; \n      });\n  },\n});\n\n// 다른 action 내보내기\nexport default hotelSlice.reducer;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAAEC,WAAW,QAAQ,iBAAiB;AAE5D,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,CAAC,CAAC;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGP,WAAW,CAAC;EAC7BQ,IAAI,EAAE,QAAQ;EACdL,YAAY;EACZM,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,aAAa,CAACY,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDO,OAAO,CAACX,aAAa,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACT,MAAM,GAAG,WAAW;MAC1BS,KAAK,CAACV,QAAQ,GAAGa,MAAM,CAACC,WAAW,CACjCF,MAAM,CAACG,OAAO,CAACC,GAAG,CAAEC,CAAC,IAAK,CAACA,CAAC,CAACC,QAAQ,EAAED,CAAC,CAAC,CAC3C,CAAC;IACH,CAAC,CAAC,CACDT,OAAO,CAACX,aAAa,CAACsB,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACT,MAAM,GAAG,QAAQ;MACvBS,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACV,KAAK,CAACkB,OAAO;IACpC,CAAC,CAAC,CACDZ,OAAO,CAACV,WAAW,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjDS,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEZ,KAAK,CAACV,QAAQ,CAAC;MAClC,OAAOU,KAAK,CAACV,QAAQ,CAACY,MAAM,CAACG,OAAO,CAACG,QAAQ,CAAC;IAChD,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,eAAef,UAAU,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}