{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst initialState = {\n  comments: {}\n};\nfunction getToken() {\n  return sessionStorage.getItem(\"accessToken\");\n}\nexport const postComment = createAsyncThunk(\"comments/postComment \", async ({\n  hotel_id,\n  user_id,\n  content,\n  score\n}) => {\n  try {\n    const response = await axios.post(\"/api/hotelComment\", {\n      hotel_id,\n      user_id,\n      content,\n      score\n    }, {\n      headers: {\n        Authorization: `Bearer ${getToken()}`\n      }\n    });\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const fetchComments = createAsyncThunk(\"comments/fetchComments\", async hotelId => {\n  try {\n    const response = await axios.get(`/api/hotelComments/${hotelId}`);\n    console.log(response.data);\n    if (response.data) {\n      return {\n        hotelId,\n        comments: response.data\n      };\n    } else {\n      throw new Error('No data');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const fetchUserComments = createAsyncThunk(\"comments/fetchUserComments\", async ({\n  user_id\n}) => {\n  try {\n    const response = await axios.get(`/api/userComments/${user_id}`);\n    console.log('fetchUserComments', response.data);\n    if (response.data) {\n      return {\n        comments: response.data\n      };\n    } else {\n      throw new Error('No data');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const updateComments = createAsyncThunk(\"comments/updateComments\", async ({\n  comment_id,\n  content,\n  score\n}) => {\n  try {\n    const response = await axios.put(`/api/hotelComments/${comment_id}`, {\n      content,\n      score\n    }, {\n      headers: {\n        Authorization: `Bearer ${getToken()}`\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const deleteComments = createAsyncThunk(\"comments/deleteComments\", async ({\n  comment_id\n}) => {\n  try {\n    const response = await axios.delete(`/api/hotelComments/${comment_id}`, {\n      headers: {\n        Authorization: `Bearer ${getToken()}`\n      }\n    });\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nconst commentSlice = createSlice({\n  name: 'comment',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      state.comments = {\n        ...state.comments\n      };\n      state.comments[action.payload.hotelId] = action.payload.comments;\n    }).addCase(fetchUserComments.fulfilled, (state, action) => {\n      state.comments = {\n        ...state.comments\n      };\n      state.comments['user'] = action.payload.comments;\n    }).addCase(updateComments.fulfilled, (state, action) => {\n      const {\n        comment_id,\n        content,\n        score\n      } = action.payload;\n      for (let hotelId in state.comments) {\n        state.comments[hotelId] = state.comments[hotelId].map(comment => comment.id === comment_id ? {\n          ...comment,\n          content,\n          score\n        } : comment);\n      }\n    }).addCase(deleteComments.fulfilled, (state, action) => {\n      const deletedCommentId = action.payload.comment_id;\n      for (let hotelId in state.comments) {\n        state.comments[hotelId] = state.comments[hotelId].filter(comment => comment.id !== deletedCommentId);\n      }\n    });\n  }\n});\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","comments","getToken","sessionStorage","getItem","postComment","hotel_id","user_id","content","score","response","post","headers","Authorization","console","log","data","error","fetchComments","hotelId","get","Error","fetchUserComments","updateComments","comment_id","put","deleteComments","delete","commentSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","map","comment","id","deletedCommentId","filter","reducer"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/redux/slice/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport axios from 'axios';\n\nconst initialState = {\n    comments: {},\n};\n\nfunction getToken() {\n    return sessionStorage.getItem(\"accessToken\");\n}\n\nexport const postComment  = createAsyncThunk(\n    \"comments/postComment \",\n    async ({hotel_id, user_id, content, score }) => {\n        try{\n            const response = await axios.post(\"/api/hotelComment\",{\n            hotel_id,\n            user_id,\n            content,\n            score,\n            },{\n            headers: { Authorization: `Bearer ${getToken()}` },\n            });\n            console.log(response.data);\n            return response.data;\n        }catch (error) {\n            console.log(error);\n        }}\n)\n\nexport const fetchComments = createAsyncThunk(\n    \"comments/fetchComments\",\n    async (hotelId) => {\n        try{\n            const response = await axios.get(`/api/hotelComments/${hotelId}`);\n            console.log(response.data);\n            if (response.data) {\n                return { hotelId, comments: response.data };\n            } else {\n                throw new Error('No data');\n            }\n        } catch (error) {\n            console.log(error);\n        }}\n)\n\nexport const fetchUserComments = createAsyncThunk(\n    \"comments/fetchUserComments\",\n    async({user_id}) => {\n        try{\n            const response = await axios.get(`/api/userComments/${user_id}`);\n            console.log('fetchUserComments',response.data);\n            if (response.data) {\n                return { comments: response.data };\n            } else {\n                throw new Error('No data');\n            }\n        } catch (error) {\n            console.log(error);\n        }}\n)\n\nexport const updateComments = createAsyncThunk(\n    \"comments/updateComments\",\n    async ({comment_id, content, score}) => {\n        try {\n            const response = await axios.put(`/api/hotelComments/${comment_id}`, {content,score},\n            {\n                headers: { Authorization: `Bearer ${getToken()}` },\n            });\n            console.log(response);\n            return response.data;\n        }catch(error){\n            console.log(error);\n        }\n    }\n)\n\nexport const deleteComments = createAsyncThunk(\n    \"comments/deleteComments\",\n    async ({comment_id}) => {\n        try {\n            const response = await axios.delete(`/api/hotelComments/${comment_id}`, {\n                headers: { Authorization: `Bearer ${getToken()}` },\n            })\n            console.log(response);\n            return response.data;\n        }catch(error){\n            console.log(error);\n        }\n    }\n)\n\nconst commentSlice = createSlice({\n    name:'comment',\n    initialState:initialState,\n    reducers:{},\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchComments.fulfilled, (state, action)=> {\n            state.comments = {...state.comments};\n            state.comments[action.payload.hotelId] = action.payload.comments;\n        })\n        .addCase(fetchUserComments.fulfilled, (state, action)=> {\n            state.comments = {...state.comments};\n            state.comments['user'] = action.payload.comments;\n        })\n        .addCase(updateComments.fulfilled, (state, action) => {\n            const { comment_id, content, score } = action.payload;\n            \n            for(let hotelId in state.comments){\n                state.comments[hotelId] = state.comments[hotelId].map(comment =>\n                    comment.id === comment_id ? {...comment, content, score} : comment\n                );\n            }\n        })\n        .addCase(deleteComments.fulfilled, (state, action)=>{\n            const deletedCommentId = action.payload.comment_id;\n\n            for(let hotelId in state.comments){\n                state.comments[hotelId] = state.comments[hotelId].filter(comment =>\n                    comment.id !== deletedCommentId\n                    )\n                }\n        })\n    }\n});\n\nexport default commentSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}