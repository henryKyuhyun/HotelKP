{"ast":null,"code":"\n// //성공본 Final\n// //client/src/components/chat/Chat.jsx \n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import socketIOClient from \"socket.io-client\"; \n// import { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\n// const ENDPOINT = \"http://localhost:4000\"; \n\n// export default function Chat({ isChatOpen, handleChatClose }) {\n//   const [message, setMessage] = useState('');\n//   const [socket, setSocket] = useState(null);\n//   const [response, setResponse] = useState({});\n//   const userRole = useSelector((state) => state.auth.userRole);\n//   const userId = useSelector((state) => state.auth.userId);\n//   const [connectedUsers, setConnectedUsers] = useState([]);\n//   const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [chatRooms, setChatRooms] = useState({}); \n\n//   const [chatOpen, setChatOpen] = useState(true);\n\n//   useEffect(() => {\n//     const socket = socketIOClient(ENDPOINT); \n//     setSocket(socket);\n\n//     socket.emit('register', { role: userRole, userId });\n\n//     socket.on('chat message', (message) => {\n//       console.log('Received chat message:', message);\n//       if (activeChatRoomId === null) {\n//         setActiveChatRoomId(message.chatRoomId);\n//       }\n\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n//       }));\n//     });\n\n//     socket.on('connected users', (userIds) => {\n//       console.log('Connected users:', userIds);\n//       setConnectedUsers(userIds);\n//     });\n\n//     socket.on('all chat rooms', (allChatRooms) => {\n//       setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n//       console.log('Received all chat rooms:', allChatRooms);\n//     });\n\n//     socket.on('chat history', (history) => {\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [activeChatRoomId]: history,\n//       }));\n//     });\n\n//     return () => {\n//       socket.disconnect();\n//     };\n//   }, []);\n\n//   const startSiteAdminChat = (userId) => {\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n//     socket.emit('join chat room', {chatRoomId});  //add\n//   };\n\n//   const renderSiteAdminChatButtons = () => {\n//     return (\n//       <div>\n//         {connectedUsers.map((user) => (\n//           <button key={user} onClick={() => startSiteAdminChat(user)}>\n//             Chat with {user}\n//           </button>\n//         ))}\n//       </div>\n//     );\n//   };\n\n//   const startChatWithUser = (userId) => {\n\n//     setSelectedUser(userId);\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n\n//     socket.emit('fetch messages', { chatRoomId });\n// };\n\n// const sendMessage = () => {\n//   if (!socket) return;\n\n//   let chatRoomId;\n//   let receiverUserId;\n\n//   // If the sender is a site admin, set the receiver and chat room based on the selected user.\n//   // Otherwise, set them as the site admin by default.\n//   if (userRole === 'site_admin' && selectedUser) {\n//     chatRoomId = `${selectedUser}_site_admin`;\n//     receiverUserId = selectedUser;\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   } else {\n//     chatRoomId = `${userId}_site_admin`;\n//     receiverUserId = 'site_admin';\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   }\n\n//   socket.emit('chat message', {\n//     userId,\n//     role: userRole,\n//     receiverUserId,\n//     message,\n//     chatRoomId: activeChatRoomId,\n//   });\n\n//   setMessage('');\n\n// };\n\n// const isAdmin = userRole === \"site_admin\";\n\n// return (\n//   <ChatContainer isSiteAdmin={isAdmin}>\n//       {isChatOpen ? (\n//         <>\n//     <ChatRoomContainer isSiteAdmin={isAdmin}>\n//       {/* Render Site Admin chat buttons for Users */}\n//       {isAdmin && renderSiteAdminChatButtons()}\n\n//       {/* Chat Room Selection */}\n//       {isAdmin && (\n//         <>\n//           Select a chat room:\n//           {Object.keys(chatRooms).map((chatRoomId) =>\n//             activeChatRoomId !== chatRoomId ? (\n//               <>\n//                 {\" \"}\n//                 |{\" \"}\n//                 <span style={{ cursor: \"pointer\"}} onClick={() => {\n//                   const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n//                   setSelectedUser(userId)\n//                   startChatWithUser(userId);\n//                 }}>{chatRoomId}\n//                 </span>{\" \"}\n//                 |\n//               </>\n//             ) : null\n//           )}\n//         </>\n//       )}\n//     </ChatRoomContainer>\n\n//     {/* Messages */}\n//     <MessagesContainer>\n//   {chatRooms[activeChatRoomId]?.map((msg, index) => (\n//     <div key={index}>\n//       <strong>{msg.userId}:</strong> {msg.message}\n//     </div>\n//   ))}\n// {/* Message input */}\n// <MessageInputContainer>\n//     <MessageInput\n//       type=\"text\"\n//       value={message}\n//       onChange={(e) => setMessage(e.target.value)}\n//     />\n//     <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n//   </MessageInputContainer>\n// </MessagesContainer>\n// <button onClick={handleChatClose}>닫기</button>\n// </>\n//     ) : null}\n\n//   </ChatContainer>\n\n// );\n// }","map":{"version":3,"names":[],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx"],"sourcesContent":["\n// //성공본 Final\n// //client/src/components/chat/Chat.jsx \n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import socketIOClient from \"socket.io-client\"; \n// import { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\n// const ENDPOINT = \"http://localhost:4000\"; \n\n// export default function Chat({ isChatOpen, handleChatClose }) {\n//   const [message, setMessage] = useState('');\n//   const [socket, setSocket] = useState(null);\n//   const [response, setResponse] = useState({});\n//   const userRole = useSelector((state) => state.auth.userRole);\n//   const userId = useSelector((state) => state.auth.userId);\n//   const [connectedUsers, setConnectedUsers] = useState([]);\n//   const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [chatRooms, setChatRooms] = useState({}); \n\n//   const [chatOpen, setChatOpen] = useState(true);\n\n//   useEffect(() => {\n//     const socket = socketIOClient(ENDPOINT); \n//     setSocket(socket);\n\n//     socket.emit('register', { role: userRole, userId });\n    \n//     socket.on('chat message', (message) => {\n//       console.log('Received chat message:', message);\n//       if (activeChatRoomId === null) {\n//         setActiveChatRoomId(message.chatRoomId);\n//       }\n\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n//       }));\n//     });\n\n//     socket.on('connected users', (userIds) => {\n//       console.log('Connected users:', userIds);\n//       setConnectedUsers(userIds);\n//     });\n\n//     socket.on('all chat rooms', (allChatRooms) => {\n//       setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n//       console.log('Received all chat rooms:', allChatRooms);\n//     });\n\n//     socket.on('chat history', (history) => {\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [activeChatRoomId]: history,\n//       }));\n//     });\n\n//     return () => {\n//       socket.disconnect();\n//     };\n//   }, []);\n\n\n//   const startSiteAdminChat = (userId) => {\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n//     socket.emit('join chat room', {chatRoomId});  //add\n//   };\n\n//   const renderSiteAdminChatButtons = () => {\n//     return (\n//       <div>\n//         {connectedUsers.map((user) => (\n//           <button key={user} onClick={() => startSiteAdminChat(user)}>\n//             Chat with {user}\n//           </button>\n//         ))}\n//       </div>\n//     );\n//   };\n\n//   const startChatWithUser = (userId) => {\n  \n//     setSelectedUser(userId);\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n\n//     socket.emit('fetch messages', { chatRoomId });\n// };\n\n\n// const sendMessage = () => {\n//   if (!socket) return;\n\n//   let chatRoomId;\n//   let receiverUserId;\n\n//   // If the sender is a site admin, set the receiver and chat room based on the selected user.\n//   // Otherwise, set them as the site admin by default.\n//   if (userRole === 'site_admin' && selectedUser) {\n//     chatRoomId = `${selectedUser}_site_admin`;\n//     receiverUserId = selectedUser;\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   } else {\n//     chatRoomId = `${userId}_site_admin`;\n//     receiverUserId = 'site_admin';\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   }\n\n  \n//   socket.emit('chat message', {\n//     userId,\n//     role: userRole,\n//     receiverUserId,\n//     message,\n//     chatRoomId: activeChatRoomId,\n//   });\n\n//   setMessage('');\n\n// };\n\n// const isAdmin = userRole === \"site_admin\";\n\n// return (\n//   <ChatContainer isSiteAdmin={isAdmin}>\n//       {isChatOpen ? (\n//         <>\n//     <ChatRoomContainer isSiteAdmin={isAdmin}>\n//       {/* Render Site Admin chat buttons for Users */}\n//       {isAdmin && renderSiteAdminChatButtons()}\n\n//       {/* Chat Room Selection */}\n//       {isAdmin && (\n//         <>\n//           Select a chat room:\n//           {Object.keys(chatRooms).map((chatRoomId) =>\n//             activeChatRoomId !== chatRoomId ? (\n//               <>\n//                 {\" \"}\n//                 |{\" \"}\n//                 <span style={{ cursor: \"pointer\"}} onClick={() => {\n//                   const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n//                   setSelectedUser(userId)\n//                   startChatWithUser(userId);\n//                 }}>{chatRoomId}\n//                 </span>{\" \"}\n//                 |\n//               </>\n//             ) : null\n//           )}\n//         </>\n//       )}\n//     </ChatRoomContainer>\n\n//     {/* Messages */}\n//     <MessagesContainer>\n//   {chatRooms[activeChatRoomId]?.map((msg, index) => (\n//     <div key={index}>\n//       <strong>{msg.userId}:</strong> {msg.message}\n//     </div>\n//   ))}\n// {/* Message input */}\n// <MessageInputContainer>\n//     <MessageInput\n//       type=\"text\"\n//       value={message}\n//       onChange={(e) => setMessage(e.target.value)}\n//     />\n//     <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n//   </MessageInputContainer>\n// </MessagesContainer>\n// <button onClick={handleChatClose}>닫기</button>\n// </>\n//     ) : null}\n\n//   </ChatContainer>\n\n// );\n// }\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}