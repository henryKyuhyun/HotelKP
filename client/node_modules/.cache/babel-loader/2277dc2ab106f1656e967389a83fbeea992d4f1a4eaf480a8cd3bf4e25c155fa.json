{"ast":null,"code":"var _jsxFileName = \"/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx\",\n  _s = $RefreshSig$();\n//성공본 Final\n//client/src/components/chat/Chat.jsx \nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\";\nimport { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:4000\";\nexport default function Chat() {\n  _s();\n  var _chatRooms$activeChat;\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector(state => state.auth.userRole);\n  const userId = useSelector(state => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({}); // Add this line\n\n  const [chatOpen, setChatOpen] = useState(true); // 채팅창 열림/닫힘 상태를 추가합니다.\n\n  const closeChat = () => {\n    setChatOpen(false); // 채팅창을 닫는 함수를 만듭니다.\n  };\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    setSocket(socket);\n    socket.emit('register', {\n      role: userRole,\n      userId\n    });\n    socket.on('chat message', message => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        // [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole, message: message.message }],\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), {\n          userId: message.userId,\n          role: userRole === 'user' ? 'user' : 'hotel_admin',\n          message: message.message\n        }]\n      }));\n    });\n    socket.on('connected users', userIds => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n    socket.on('all chat rooms', allChatRooms => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({\n        ...rooms,\n        [roomId]: []\n      }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n    socket.on('chat history', history => {\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history\n      }));\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const startSiteAdminChat = userId => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {\n      chatRoomId\n    }); //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: connectedUsers.map(user => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => startSiteAdminChat(user),\n        children: [\"Chat with \", user]\n      }, user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n  const startChatWithUser = userId => {\n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('fetch messages', {\n      chatRoomId\n    });\n  };\n  const sendMessage = () => {\n    if (!socket) return;\n    let chatRoomId;\n    let receiverUserId;\n\n    // If the sender is a site admin, set the receiver and chat room based on the selected user.\n    // Otherwise, set them as the site admin by default.\n    if (userRole === 'site_admin' && selectedUser) {\n      chatRoomId = `${selectedUser}_site_admin`;\n      receiverUserId = selectedUser;\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    } else {\n      chatRoomId = `${userId}_site_admin`;\n      receiverUserId = 'site_admin';\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    }\n\n    socket.emit('chat message', {\n      userId,\n      role: userRole,\n      receiverUserId,\n      message,\n      chatRoomId: activeChatRoomId\n    });\n    setMessage('');\n  };\n  const isAdmin = userRole === \"site_admin\";\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    isSiteAdmin: isAdmin,\n    children: chatOpen ?\n    /*#__PURE__*/\n    // chatOpen 상태에 따라 채팅창이 보이거나 안 보이게 합니다.\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatRoomContainer, {\n        isSiteAdmin: isAdmin,\n        children: [isAdmin && renderSiteAdminChatButtons(), isAdmin && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Select a chat room:\", Object.keys(chatRooms).map(chatRoomId => activeChatRoomId !== chatRoomId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\" \", \"|\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: \"pointer\"\n              },\n              onClick: () => {\n                const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n                setSelectedUser(userId);\n                startChatWithUser(userId);\n              },\n              children: chatRoomId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), \" \", \"|\"]\n          }, void 0, true) : null)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessagesContainer, {\n        children: [(_chatRooms$activeChat = chatRooms[activeChatRoomId]) === null || _chatRooms$activeChat === void 0 ? void 0 : _chatRooms$activeChat.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.userId, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 7\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 5\n        }, this)), /*#__PURE__*/_jsxDEV(MessageInputContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageInput, {\n            type: \"text\",\n            value: message,\n            onChange: e => setMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(SendMessageButton, {\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closeChat,\n        children: \"\\uB2EB\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setChatOpen(true),\n      children: \"\\uCC44\\uD305 \\uC5F4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) // 채팅창이 닫혔을 때는 '채팅 열기' 버튼을 보여줍니다.\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 3\n  }, this);\n}\n_s(Chat, \"oPClkDBjmohz7KTSYwplaiM7sVc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","socketIOClient","ChatContainer","ChatRoomContainer","MessagesContainer","MessageInput","MessageInputContainer","SendMessageButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Chat","_s","_chatRooms$activeChat","message","setMessage","socket","setSocket","response","setResponse","userRole","state","auth","userId","connectedUsers","setConnectedUsers","activeChatRoomId","setActiveChatRoomId","selectedUser","setSelectedUser","chatRooms","setChatRooms","chatOpen","setChatOpen","closeChat","emit","role","on","console","log","chatRoomId","prevChatRooms","userIds","allChatRooms","reduce","rooms","roomId","history","disconnect","startSiteAdminChat","renderSiteAdminChatButtons","children","map","user","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startChatWithUser","sendMessage","receiverUserId","isAdmin","isSiteAdmin","Object","keys","style","cursor","split","msg","index","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx"],"sourcesContent":["\n//성공본 Final\n//client/src/components/chat/Chat.jsx \nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\"; \nimport { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\nconst ENDPOINT = \"http://localhost:4000\"; \n\nexport default function Chat() {\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector((state) => state.auth.userRole);\n  const userId = useSelector((state) => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({}); // Add this line\n\n  const [chatOpen, setChatOpen] = useState(true); // 채팅창 열림/닫힘 상태를 추가합니다.\n\n  const closeChat = () => {\n    setChatOpen(false); // 채팅창을 닫는 함수를 만듭니다.\n  };\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT); \n    setSocket(socket);\n\n    socket.emit('register', { role: userRole, userId });\n    \n    socket.on('chat message', (message) => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        // [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole, message: message.message }],\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n      }));\n    });\n\n    socket.on('connected users', (userIds) => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n\n    socket.on('all chat rooms', (allChatRooms) => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n\n    socket.on('chat history', (history) => {\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history,\n      }));\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n\n  const startSiteAdminChat = (userId) => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {chatRoomId});  //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return (\n      <div>\n        {connectedUsers.map((user) => (\n          <button key={user} onClick={() => startSiteAdminChat(user)}>\n            Chat with {user}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const startChatWithUser = (userId) => {\n  \n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n\n    socket.emit('fetch messages', { chatRoomId });\n};\n\n\nconst sendMessage = () => {\n  if (!socket) return;\n\n  let chatRoomId;\n  let receiverUserId;\n\n  // If the sender is a site admin, set the receiver and chat room based on the selected user.\n  // Otherwise, set them as the site admin by default.\n  if (userRole === 'site_admin' && selectedUser) {\n    chatRoomId = `${selectedUser}_site_admin`;\n    receiverUserId = selectedUser;\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  } else {\n    chatRoomId = `${userId}_site_admin`;\n    receiverUserId = 'site_admin';\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  }\n\n  \n  socket.emit('chat message', {\n    userId,\n    role: userRole,\n    receiverUserId,\n    message,\n    chatRoomId: activeChatRoomId,\n  });\n\n  setMessage('');\n\n};\n\nconst isAdmin = userRole === \"site_admin\";\n\nreturn (\n  <ChatContainer isSiteAdmin={isAdmin}>\n          {chatOpen ? (  // chatOpen 상태에 따라 채팅창이 보이거나 안 보이게 합니다.\n        <>\n\n    <ChatRoomContainer isSiteAdmin={isAdmin}>\n      {/* Render Site Admin chat buttons for Users */}\n      {isAdmin && renderSiteAdminChatButtons()}\n\n      {/* Chat Room Selection */}\n      {isAdmin && (\n        <>\n          Select a chat room:\n          {Object.keys(chatRooms).map((chatRoomId) =>\n            activeChatRoomId !== chatRoomId ? (\n              <>\n                {\" \"}\n                |{\" \"}\n                <span style={{ cursor: \"pointer\"}} onClick={() => {\n                  const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n                  setSelectedUser(userId)\n                  startChatWithUser(userId);\n                }}>{chatRoomId}\n                </span>{\" \"}\n                |\n              </>\n            ) : null\n          )}\n        </>\n      )}\n    </ChatRoomContainer>\n\n    {/* Messages */}\n    <MessagesContainer>\n  {chatRooms[activeChatRoomId]?.map((msg, index) => (\n    <div key={index}>\n      <strong>{msg.userId}:</strong> {msg.message}\n    </div>\n  ))}\n{/* Message input */}\n<MessageInputContainer>\n    <MessageInput\n      type=\"text\"\n      value={message}\n      onChange={(e) => setMessage(e.target.value)}\n    />\n    <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n  </MessageInputContainer>\n</MessagesContainer>\n<button onClick={closeChat}>닫기</button> \n</>\n      ) : (\n        <button onClick={() => setChatOpen(true)}>채팅 열기</button>  // 채팅창이 닫혔을 때는 '채팅 열기' 버튼을 보여줍니다.\n        )}\n\n  </ChatContainer>\n\n);\n}\n"],"mappings":";;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,aAAa,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,iBAAiB,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtJ,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAMuB,QAAQ,GAAGtB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,QAAQ,CAAC;EAC5D,MAAMG,MAAM,GAAGzB,WAAW,CAAEuB,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC;EACxD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC6B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC+B,YAAY,EAAEC,eAAe,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiC,SAAS,EAAEC,YAAY,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhD,MAAM,CAACmC,QAAQ,EAAEC,WAAW,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhD,MAAMqC,SAAS,GAAGA,CAAA,KAAM;IACtBD,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;EACtB,CAAC;;EAEDrC,SAAS,CAAC,MAAM;IACd,MAAMoB,MAAM,GAAGjB,cAAc,CAACW,QAAQ,CAAC;IACvCO,SAAS,CAACD,MAAM,CAAC;IAEjBA,MAAM,CAACmB,IAAI,CAAC,UAAU,EAAE;MAAEC,IAAI,EAAEhB,QAAQ;MAAEG;IAAO,CAAC,CAAC;IAEnDP,MAAM,CAACqB,EAAE,CAAC,cAAc,EAAGvB,OAAO,IAAK;MACrCwB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEzB,OAAO,CAAC;MAC9C,IAAIY,gBAAgB,KAAK,IAAI,EAAE;QAC7BC,mBAAmB,CAACb,OAAO,CAAC0B,UAAU,CAAC;MACzC;MAEAT,YAAY,CAAEU,aAAa,KAAM;QAC/B,GAAGA,aAAa;QAChB;QACA,CAAC3B,OAAO,CAAC0B,UAAU,GAAG,CAAC,IAAIC,aAAa,CAAC3B,OAAO,CAAC0B,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE;UAAEjB,MAAM,EAAET,OAAO,CAACS,MAAM;UAAEa,IAAI,EAAEhB,QAAQ,KAAK,MAAM,GAAG,MAAM,GAAG,aAAa;UAAEN,OAAO,EAAEA,OAAO,CAACA;QAAQ,CAAC;MAE/K,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEFE,MAAM,CAACqB,EAAE,CAAC,iBAAiB,EAAGK,OAAO,IAAK;MACxCJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEG,OAAO,CAAC;MACxCjB,iBAAiB,CAACiB,OAAO,CAAC;IAC5B,CAAC,CAAC;IAEF1B,MAAM,CAACqB,EAAE,CAAC,gBAAgB,EAAGM,YAAY,IAAK;MAC5CZ,YAAY,CAACY,YAAY,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,MAAM,MAAM;QAAE,GAAGD,KAAK;QAAE,CAACC,MAAM,GAAG;MAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACtFR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEI,YAAY,CAAC;IACvD,CAAC,CAAC;IAEF3B,MAAM,CAACqB,EAAE,CAAC,cAAc,EAAGU,OAAO,IAAK;MACrChB,YAAY,CAAEU,aAAa,KAAM;QAC/B,GAAGA,aAAa;QAChB,CAACf,gBAAgB,GAAGqB;MACtB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,MAAM;MACX/B,MAAM,CAACgC,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,kBAAkB,GAAI1B,MAAM,IAAK;IACrC,MAAMiB,UAAU,GAAI,GAAEjB,MAAO,aAAY;IACzCI,mBAAmB,CAACa,UAAU,CAAC;IAC/BxB,MAAM,CAACmB,IAAI,CAAC,gBAAgB,EAAE;MAACK;IAAU,CAAC,CAAC,CAAC,CAAE;EAChD,CAAC;;EAED,MAAMU,0BAA0B,GAAGA,CAAA,KAAM;IACvC,oBACE3C,OAAA;MAAA4C,QAAA,EACG3B,cAAc,CAAC4B,GAAG,CAAEC,IAAI,iBACvB9C,OAAA;QAAmB+C,OAAO,EAAEA,CAAA,KAAML,kBAAkB,CAACI,IAAI,CAAE;QAAAF,QAAA,GAAC,YAChD,EAACE,IAAI;MAAA,GADJA,IAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAET,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMC,iBAAiB,GAAIpC,MAAM,IAAK;IAEpCM,eAAe,CAACN,MAAM,CAAC;IACvB,MAAMiB,UAAU,GAAI,GAAEjB,MAAO,aAAY;IACzCI,mBAAmB,CAACa,UAAU,CAAC;IAE/BxB,MAAM,CAACmB,IAAI,CAAC,gBAAgB,EAAE;MAAEK;IAAW,CAAC,CAAC;EACjD,CAAC;EAGD,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAAC5C,MAAM,EAAE;IAEb,IAAIwB,UAAU;IACd,IAAIqB,cAAc;;IAElB;IACA;IACA,IAAIzC,QAAQ,KAAK,YAAY,IAAIQ,YAAY,EAAE;MAC7CY,UAAU,GAAI,GAAEZ,YAAa,aAAY;MACzCiC,cAAc,GAAGjC,YAAY;MAC7BD,mBAAmB,CAACa,UAAU,CAAC,CAAC,CAAC;IACnC,CAAC,MAAM;MACLA,UAAU,GAAI,GAAEjB,MAAO,aAAY;MACnCsC,cAAc,GAAG,YAAY;MAC7BlC,mBAAmB,CAACa,UAAU,CAAC,CAAC,CAAC;IACnC;;IAGAxB,MAAM,CAACmB,IAAI,CAAC,cAAc,EAAE;MAC1BZ,MAAM;MACNa,IAAI,EAAEhB,QAAQ;MACdyC,cAAc;MACd/C,OAAO;MACP0B,UAAU,EAAEd;IACd,CAAC,CAAC;IAEFX,UAAU,CAAC,EAAE,CAAC;EAEhB,CAAC;EAED,MAAM+C,OAAO,GAAG1C,QAAQ,KAAK,YAAY;EAEzC,oBACEb,OAAA,CAACP,aAAa;IAAC+D,WAAW,EAAED,OAAQ;IAAAX,QAAA,EAC3BnB,QAAQ;IAAA;IAAM;IACjBzB,OAAA,CAAAE,SAAA;MAAA0C,QAAA,gBAEJ5C,OAAA,CAACN,iBAAiB;QAAC8D,WAAW,EAAED,OAAQ;QAAAX,QAAA,GAErCW,OAAO,IAAIZ,0BAA0B,CAAC,CAAC,EAGvCY,OAAO,iBACNvD,OAAA,CAAAE,SAAA;UAAA0C,QAAA,GAAE,qBAEA,EAACa,MAAM,CAACC,IAAI,CAACnC,SAAS,CAAC,CAACsB,GAAG,CAAEZ,UAAU,IACrCd,gBAAgB,KAAKc,UAAU,gBAC7BjC,OAAA,CAAAE,SAAA;YAAA0C,QAAA,GACG,GAAG,EAAC,GACJ,EAAC,GAAG,eACL5C,OAAA;cAAM2D,KAAK,EAAE;gBAAEC,MAAM,EAAE;cAAS,CAAE;cAACb,OAAO,EAAEA,CAAA,KAAM;gBAChD,MAAM/B,MAAM,GAAGiB,UAAU,CAAC4B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzCvC,eAAe,CAACN,MAAM,CAAC;gBACvBoC,iBAAiB,CAACpC,MAAM,CAAC;cAC3B,CAAE;cAAA4B,QAAA,EAAEX;YAAU;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC,EAAC,GAAG,EAAC,GAEd;UAAA,eAAE,CAAC,GACD,IACN,CAAC;QAAA,eACD,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACgB,CAAC,eAGpBnD,OAAA,CAACL,iBAAiB;QAAAiD,QAAA,IAAAtC,qBAAA,GACnBiB,SAAS,CAACJ,gBAAgB,CAAC,cAAAb,qBAAA,uBAA3BA,qBAAA,CAA6BuC,GAAG,CAAC,CAACiB,GAAG,EAAEC,KAAK,kBAC3C/D,OAAA;UAAA4C,QAAA,gBACE5C,OAAA;YAAA4C,QAAA,GAASkB,GAAG,CAAC9C,MAAM,EAAC,GAAC;UAAA;YAAAgC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACW,GAAG,CAACvD,OAAO;QAAA,GADnCwD,KAAK;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN,CAAC,eAEJnD,OAAA,CAACH,qBAAqB;UAAA+C,QAAA,gBAClB5C,OAAA,CAACJ,YAAY;YACXoE,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE1D,OAAQ;YACf2D,QAAQ,EAAGC,CAAC,IAAK3D,UAAU,CAAC2D,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC,eACFnD,OAAA,CAACF,iBAAiB;YAACiD,OAAO,EAAEM,WAAY;YAAAT,QAAA,EAAC;UAAI;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAmB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC,eACpBnD,OAAA;QAAQ+C,OAAO,EAAEpB,SAAU;QAAAiB,QAAA,EAAC;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACrC,CAAC,gBAEKnD,OAAA;MAAQ+C,OAAO,EAAEA,CAAA,KAAMrB,WAAW,CAAC,IAAI,CAAE;MAAAkB,QAAA,EAAC;IAAK;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,CAAE;EACzD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEQ,CAAC;AAGlB;AAAC9C,EAAA,CAnLuBD,IAAI;EAAA,QAITb,WAAW,EACbA,WAAW;AAAA;AAAA8E,EAAA,GALJjE,IAAI;AAAA,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}