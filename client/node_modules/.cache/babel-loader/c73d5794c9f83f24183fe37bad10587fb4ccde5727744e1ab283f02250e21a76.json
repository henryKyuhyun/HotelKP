{"ast":null,"code":"var _jsxFileName = \"/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx\",\n  _s = $RefreshSig$();\n// //성공본 Final\n// //client/src/components/chat/Chat.jsx \n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import socketIOClient from \"socket.io-client\"; \n// import { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\n// const ENDPOINT = \"http://localhost:4000\"; \n\n// export default function Chat({ isChatOpen, handleChatClose }) {\n//   const [message, setMessage] = useState('');\n//   const [socket, setSocket] = useState(null);\n//   const [response, setResponse] = useState({});\n//   const userRole = useSelector((state) => state.auth.userRole);\n//   const userId = useSelector((state) => state.auth.userId);\n//   const [connectedUsers, setConnectedUsers] = useState([]);\n//   const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [chatRooms, setChatRooms] = useState({}); \n\n//   const [chatOpen, setChatOpen] = useState(true);\n\n//   useEffect(() => {\n//     const socket = socketIOClient(ENDPOINT); \n//     setSocket(socket);\n\n//     socket.emit('register', { role: userRole, userId });\n\n//     socket.on('chat message', (message) => {\n//       console.log('Received chat message:', message);\n//       if (activeChatRoomId === null) {\n//         setActiveChatRoomId(message.chatRoomId);\n//       }\n\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n//       }));\n//     });\n\n//     socket.on('connected users', (userIds) => {\n//       console.log('Connected users:', userIds);\n//       setConnectedUsers(userIds);\n//     });\n\n//     socket.on('all chat rooms', (allChatRooms) => {\n//       setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n//       console.log('Received all chat rooms:', allChatRooms);\n//     });\n\n//     socket.on('chat history', (history) => {\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [activeChatRoomId]: history,\n//       }));\n//     });\n\n//     return () => {\n//       socket.disconnect();\n//     };\n//   }, []);\n\n//   const startSiteAdminChat = (userId) => {\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n//     socket.emit('join chat room', {chatRoomId});  //add\n//   };\n\n//   const renderSiteAdminChatButtons = () => {\n//     return (\n//       <div>\n//         {connectedUsers.map((user) => (\n//           <button key={user} onClick={() => startSiteAdminChat(user)}>\n//             Chat with {user}\n//           </button>\n//         ))}\n//       </div>\n//     );\n//   };\n\n//   const startChatWithUser = (userId) => {\n\n//     setSelectedUser(userId);\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n\n//     socket.emit('fetch messages', { chatRoomId });\n// };\n\n// const sendMessage = () => {\n//   if (!socket) return;\n\n//   let chatRoomId;\n//   let receiverUserId;\n\n//   // If the sender is a site admin, set the receiver and chat room based on the selected user.\n//   // Otherwise, set them as the site admin by default.\n//   if (userRole === 'site_admin' && selectedUser) {\n//     chatRoomId = `${selectedUser}_site_admin`;\n//     receiverUserId = selectedUser;\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   } else {\n//     chatRoomId = `${userId}_site_admin`;\n//     receiverUserId = 'site_admin';\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   }\n\n//   socket.emit('chat message', {\n//     userId,\n//     role: userRole,\n//     receiverUserId,\n//     message,\n//     chatRoomId: activeChatRoomId,\n//   });\n\n//   setMessage('');\n\n// };\n\n// const isAdmin = userRole === \"site_admin\";\n\n// return (\n//   <ChatContainer isSiteAdmin={isAdmin}>\n//       {isChatOpen ? (\n//         <>\n//     <ChatRoomContainer isSiteAdmin={isAdmin}>\n//       {/* Render Site Admin chat buttons for Users */}\n//       {isAdmin && renderSiteAdminChatButtons()}\n\n//       {/* Chat Room Selection */}\n//       {isAdmin && (\n//         <>\n//           Select a chat room:\n//           {Object.keys(chatRooms).map((chatRoomId) =>\n//             activeChatRoomId !== chatRoomId ? (\n//               <>\n//                 {\" \"}\n//                 |{\" \"}\n//                 <span style={{ cursor: \"pointer\"}} onClick={() => {\n//                   const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n//                   setSelectedUser(userId)\n//                   startChatWithUser(userId);\n//                 }}>{chatRoomId}\n//                 </span>{\" \"}\n//                 |\n//               </>\n//             ) : null\n//           )}\n//         </>\n//       )}\n//     </ChatRoomContainer>\n\n//     {/* Messages */}\n//     <MessagesContainer>\n//   {chatRooms[activeChatRoomId]?.map((msg, index) => (\n//     <div key={index}>\n//       <strong>{msg.userId}:</strong> {msg.message}\n//     </div>\n//   ))}\n// {/* Message input */}\n// <MessageInputContainer>\n//     <MessageInput\n//       type=\"text\"\n//       value={message}\n//       onChange={(e) => setMessage(e.target.value)}\n//     />\n//     <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n//   </MessageInputContainer>\n// </MessagesContainer>\n// <button onClick={handleChatClose}>닫기</button>\n// </>\n//     ) : null}\n\n//   </ChatContainer>\n\n// );\n// }\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\";\nimport { ChatContainer, ChatRoomContainer, MessagesContainer, MessagesBody, ItemContainer, MessageContent, MessageInput, MessageInputContainer, MessageForm, SendMessageButton, SendIcon, CloseIcon } from '../pagestyles/ChatStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:4000\";\nexport default function Chat({\n  isChatOpen,\n  handleChatClose\n}) {\n  _s();\n  var _chatRooms$activeChat;\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector(state => state.auth.userRole);\n  const userId = useSelector(state => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({});\n  const [chatOpen, setChatOpen] = useState(true);\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    setSocket(socket);\n    socket.emit('register', {\n      role: userRole,\n      userId\n    });\n    socket.on('chat message', message => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), {\n          userId: message.userId,\n          role: userRole === 'user' ? 'user' : 'hotel_admin',\n          message: message.message\n        }]\n      }));\n    });\n    socket.on('connected users', userIds => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n    socket.on('all chat rooms', allChatRooms => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({\n        ...rooms,\n        [roomId]: []\n      }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n    socket.on('chat history', history => {\n      setChatRooms(prevChatRooms => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history\n      }));\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const startSiteAdminChat = userId => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {\n      chatRoomId\n    }); //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: connectedUsers.map(user => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => startSiteAdminChat(user),\n        children: [\"Chat with \", user]\n      }, user, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  };\n  const startChatWithUser = userId => {\n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('fetch messages', {\n      chatRoomId\n    });\n  };\n  const sendMessage = () => {\n    if (!socket) return;\n    let chatRoomId;\n    let receiverUserId;\n\n    // If the sender is a site admin, set the receiver and chat room based on the selected user.\n    // Otherwise, set them as the site admin by default.\n    if (userRole === 'site_admin' && selectedUser) {\n      chatRoomId = `${selectedUser}_site_admin`;\n      receiverUserId = selectedUser;\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    } else {\n      chatRoomId = `${userId}_site_admin`;\n      receiverUserId = 'site_admin';\n      setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n    }\n\n    socket.emit('chat message', {\n      userId,\n      role: userRole,\n      receiverUserId,\n      message,\n      chatRoomId: activeChatRoomId\n    });\n    setMessage('');\n  };\n  const isAdmin = userRole === \"site_admin\";\n  return /*#__PURE__*/_jsxDEV(ChatContainer, {\n    isSiteAdmin: isAdmin,\n    isChatOpen: isChatOpen,\n    children: isChatOpen && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatRoomContainer, {\n        isSiteAdmin: isAdmin,\n        children: [isAdmin && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Select a chat room:\", Object.keys(chatRooms).map(chatRoomId => activeChatRoomId !== chatRoomId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\" \", \"|\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                cursor: \"pointer\"\n              },\n              onClick: () => {\n                const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n                setSelectedUser(userId);\n                startChatWithUser(userId);\n              },\n              children: chatRoomId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), \" \", \"|\"]\n          }, void 0, true) : null)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleChatClose,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(MessagesContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessagesBody, {\n          children: (_chatRooms$activeChat = chatRooms[activeChatRoomId]) === null || _chatRooms$activeChat === void 0 ? void 0 : _chatRooms$activeChat.map((msg, index) => /*#__PURE__*/_jsxDEV(ItemContainer, {\n            CurrentUser: msg.userId === userId,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: msg.userId === userId ? /*#__PURE__*/_jsxDEV(MessageContent, {\n                CurrentUser: msg.userId === userId,\n                children: msg.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 15\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: msg.userId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(MessageContent, {\n                  CurrentUser: msg.userId === userId,\n                  children: msg.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 11\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MessageInputContainer, {\n          children: /*#__PURE__*/_jsxDEV(MessageForm, {\n            children: [/*#__PURE__*/_jsxDEV(MessageInput, {\n              type: \"text\",\n              value: message,\n              placeholder: \"\\uBA54\\uC138\\uC9C0\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n              onKeyDown: e => e.key === 'Enter' ? sendMessage(e.target.value) : null,\n              onChange: e => setMessage(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 9\n            }, this), message.length > 0 && /*#__PURE__*/_jsxDEV(SendMessageButton, {\n              onClick: sendMessage,\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 16\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 3\n  }, this);\n}\n_s(Chat, \"oPClkDBjmohz7KTSYwplaiM7sVc=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","socketIOClient","ChatContainer","ChatRoomContainer","MessagesContainer","MessagesBody","ItemContainer","MessageContent","MessageInput","MessageInputContainer","MessageForm","SendMessageButton","SendIcon","CloseIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Chat","isChatOpen","handleChatClose","_s","_chatRooms$activeChat","message","setMessage","socket","setSocket","response","setResponse","userRole","state","auth","userId","connectedUsers","setConnectedUsers","activeChatRoomId","setActiveChatRoomId","selectedUser","setSelectedUser","chatRooms","setChatRooms","chatOpen","setChatOpen","emit","role","on","console","log","chatRoomId","prevChatRooms","userIds","allChatRooms","reduce","rooms","roomId","history","disconnect","startSiteAdminChat","renderSiteAdminChatButtons","children","map","user","onClick","fileName","_jsxFileName","lineNumber","columnNumber","startChatWithUser","sendMessage","receiverUserId","isAdmin","isSiteAdmin","Object","keys","style","cursor","split","msg","index","CurrentUser","type","value","placeholder","onKeyDown","e","key","target","onChange","length","_c","$RefreshReg$"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/components/chat/Chat.jsx"],"sourcesContent":["\n// //성공본 Final\n// //client/src/components/chat/Chat.jsx \n// import React, { useEffect, useState } from 'react';\n// import { useSelector } from 'react-redux';\n// import socketIOClient from \"socket.io-client\"; \n// import { ChatContainer, ChatRoomContainer, MessagesContainer, MessageInput, MessageInputContainer, SendMessageButton } from '../pagestyles/ChatStyle';\n\n// const ENDPOINT = \"http://localhost:4000\"; \n\n// export default function Chat({ isChatOpen, handleChatClose }) {\n//   const [message, setMessage] = useState('');\n//   const [socket, setSocket] = useState(null);\n//   const [response, setResponse] = useState({});\n//   const userRole = useSelector((state) => state.auth.userRole);\n//   const userId = useSelector((state) => state.auth.userId);\n//   const [connectedUsers, setConnectedUsers] = useState([]);\n//   const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n//   const [selectedUser, setSelectedUser] = useState(null);\n//   const [chatRooms, setChatRooms] = useState({}); \n\n//   const [chatOpen, setChatOpen] = useState(true);\n\n//   useEffect(() => {\n//     const socket = socketIOClient(ENDPOINT); \n//     setSocket(socket);\n\n//     socket.emit('register', { role: userRole, userId });\n    \n//     socket.on('chat message', (message) => {\n//       console.log('Received chat message:', message);\n//       if (activeChatRoomId === null) {\n//         setActiveChatRoomId(message.chatRoomId);\n//       }\n\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n//       }));\n//     });\n\n//     socket.on('connected users', (userIds) => {\n//       console.log('Connected users:', userIds);\n//       setConnectedUsers(userIds);\n//     });\n\n//     socket.on('all chat rooms', (allChatRooms) => {\n//       setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n//       console.log('Received all chat rooms:', allChatRooms);\n//     });\n\n//     socket.on('chat history', (history) => {\n//       setChatRooms((prevChatRooms) => ({\n//         ...prevChatRooms,\n//         [activeChatRoomId]: history,\n//       }));\n//     });\n\n//     return () => {\n//       socket.disconnect();\n//     };\n//   }, []);\n\n\n//   const startSiteAdminChat = (userId) => {\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n//     socket.emit('join chat room', {chatRoomId});  //add\n//   };\n\n//   const renderSiteAdminChatButtons = () => {\n//     return (\n//       <div>\n//         {connectedUsers.map((user) => (\n//           <button key={user} onClick={() => startSiteAdminChat(user)}>\n//             Chat with {user}\n//           </button>\n//         ))}\n//       </div>\n//     );\n//   };\n\n//   const startChatWithUser = (userId) => {\n  \n//     setSelectedUser(userId);\n//     const chatRoomId = `${userId}_site_admin`;\n//     setActiveChatRoomId(chatRoomId);\n\n//     socket.emit('fetch messages', { chatRoomId });\n// };\n\n\n// const sendMessage = () => {\n//   if (!socket) return;\n\n//   let chatRoomId;\n//   let receiverUserId;\n\n//   // If the sender is a site admin, set the receiver and chat room based on the selected user.\n//   // Otherwise, set them as the site admin by default.\n//   if (userRole === 'site_admin' && selectedUser) {\n//     chatRoomId = `${selectedUser}_site_admin`;\n//     receiverUserId = selectedUser;\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   } else {\n//     chatRoomId = `${userId}_site_admin`;\n//     receiverUserId = 'site_admin';\n//     setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n//   }\n\n  \n//   socket.emit('chat message', {\n//     userId,\n//     role: userRole,\n//     receiverUserId,\n//     message,\n//     chatRoomId: activeChatRoomId,\n//   });\n\n//   setMessage('');\n\n// };\n\n// const isAdmin = userRole === \"site_admin\";\n\n// return (\n//   <ChatContainer isSiteAdmin={isAdmin}>\n//       {isChatOpen ? (\n//         <>\n//     <ChatRoomContainer isSiteAdmin={isAdmin}>\n//       {/* Render Site Admin chat buttons for Users */}\n//       {isAdmin && renderSiteAdminChatButtons()}\n\n//       {/* Chat Room Selection */}\n//       {isAdmin && (\n//         <>\n//           Select a chat room:\n//           {Object.keys(chatRooms).map((chatRoomId) =>\n//             activeChatRoomId !== chatRoomId ? (\n//               <>\n//                 {\" \"}\n//                 |{\" \"}\n//                 <span style={{ cursor: \"pointer\"}} onClick={() => {\n//                   const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n//                   setSelectedUser(userId)\n//                   startChatWithUser(userId);\n//                 }}>{chatRoomId}\n//                 </span>{\" \"}\n//                 |\n//               </>\n//             ) : null\n//           )}\n//         </>\n//       )}\n//     </ChatRoomContainer>\n\n//     {/* Messages */}\n//     <MessagesContainer>\n//   {chatRooms[activeChatRoomId]?.map((msg, index) => (\n//     <div key={index}>\n//       <strong>{msg.userId}:</strong> {msg.message}\n//     </div>\n//   ))}\n// {/* Message input */}\n// <MessageInputContainer>\n//     <MessageInput\n//       type=\"text\"\n//       value={message}\n//       onChange={(e) => setMessage(e.target.value)}\n//     />\n//     <SendMessageButton onClick={sendMessage}>Send</SendMessageButton>\n//   </MessageInputContainer>\n// </MessagesContainer>\n// <button onClick={handleChatClose}>닫기</button>\n// </>\n//     ) : null}\n\n//   </ChatContainer>\n\n// );\n// }\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport socketIOClient from \"socket.io-client\"; \nimport { ChatContainer,\n        ChatRoomContainer,\n        MessagesContainer,\n        MessagesBody,\n        ItemContainer,\n        MessageContent,\n        MessageInput,\n        MessageInputContainer, \n        MessageForm,\n        SendMessageButton,\n        SendIcon,\n        CloseIcon, } from '../pagestyles/ChatStyle';\n\nconst ENDPOINT = \"http://localhost:4000\"; \n\nexport default function Chat({ isChatOpen, handleChatClose }) {\n  const [message, setMessage] = useState('');\n  const [socket, setSocket] = useState(null);\n  const [response, setResponse] = useState({});\n  const userRole = useSelector((state) => state.auth.userRole);\n  const userId = useSelector((state) => state.auth.userId);\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [activeChatRoomId, setActiveChatRoomId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [chatRooms, setChatRooms] = useState({}); \n\n  const [chatOpen, setChatOpen] = useState(true);\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT); \n    setSocket(socket);\n\n    socket.emit('register', { role: userRole, userId });\n    \n    socket.on('chat message', (message) => {\n      console.log('Received chat message:', message);\n      if (activeChatRoomId === null) {\n        setActiveChatRoomId(message.chatRoomId);\n      }\n\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        [message.chatRoomId]: [...(prevChatRooms[message.chatRoomId] || []), { userId: message.userId, role: userRole === 'user' ? 'user' : 'hotel_admin', message: message.message }],\n\n      }));\n    });\n\n    socket.on('connected users', (userIds) => {\n      console.log('Connected users:', userIds);\n      setConnectedUsers(userIds);\n    });\n\n    socket.on('all chat rooms', (allChatRooms) => {\n      setChatRooms(allChatRooms.reduce((rooms, roomId) => ({ ...rooms, [roomId]: [] }), {}));\n      console.log('Received all chat rooms:', allChatRooms);\n    });\n\n    socket.on('chat history', (history) => {\n      setChatRooms((prevChatRooms) => ({\n        ...prevChatRooms,\n        [activeChatRoomId]: history,\n      }));\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n\n  const startSiteAdminChat = (userId) => {\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n    socket.emit('join chat room', {chatRoomId});  //add\n  };\n\n  const renderSiteAdminChatButtons = () => {\n    return (\n      <div>\n        {connectedUsers.map((user) => (\n          <button key={user} onClick={() => startSiteAdminChat(user)}>\n            Chat with {user}\n          </button>\n        ))}\n      </div>\n    );\n  };\n\n  const startChatWithUser = (userId) => {\n  \n    setSelectedUser(userId);\n    const chatRoomId = `${userId}_site_admin`;\n    setActiveChatRoomId(chatRoomId);\n\n    socket.emit('fetch messages', { chatRoomId });\n};\n\n\nconst sendMessage = () => {\n  if (!socket) return;\n\n  let chatRoomId;\n  let receiverUserId;\n\n  // If the sender is a site admin, set the receiver and chat room based on the selected user.\n  // Otherwise, set them as the site admin by default.\n  if (userRole === 'site_admin' && selectedUser) {\n    chatRoomId = `${selectedUser}_site_admin`;\n    receiverUserId = selectedUser;\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  } else {\n    chatRoomId = `${userId}_site_admin`;\n    receiverUserId = 'site_admin';\n    setActiveChatRoomId(chatRoomId); // Update the active chat room ID\n  }\n\n  \n  socket.emit('chat message', {\n    userId,\n    role: userRole,\n    receiverUserId,\n    message,\n    chatRoomId: activeChatRoomId,\n  });\n\n  setMessage('');\n\n};\n\nconst isAdmin = userRole === \"site_admin\";\n\nreturn (\n  <ChatContainer isSiteAdmin={isAdmin} isChatOpen={isChatOpen}>\n      {isChatOpen && ( \n        <>\n\n    <ChatRoomContainer isSiteAdmin={isAdmin}>\n      {/* Render Site Admin chat buttons for Users */}\n      {/* {isAdmin && renderSiteAdminChatButtons()} */}\n\n      {/* Chat Room Selection */}\n      {isAdmin && (\n        <>\n          Select a chat room:\n          {Object.keys(chatRooms).map((chatRoomId) =>\n            activeChatRoomId !== chatRoomId ? (\n              <>\n                {\" \"}\n                |{\" \"}\n                <span style={{ cursor: \"pointer\"}} onClick={() => {\n                  const userId = chatRoomId.split('_')[0]; // Extract the user ID from the chat room ID\n                  setSelectedUser(userId)\n                  startChatWithUser(userId);\n                }}>{chatRoomId}\n                </span>{\" \"}\n                |\n              </>\n            ) : null\n          )}\n        </>\n      )}\n      <button onClick={handleChatClose}>\n        <CloseIcon/>\n      </button>\n    </ChatRoomContainer>\n\n    {/* Messages */}\n    <MessagesContainer>\n      <MessagesBody>\n        {chatRooms[activeChatRoomId]?.map((msg, index) => (\n\n        <ItemContainer \n          key={index}\n          CurrentUser={msg.userId === userId}\n        >\n          <div>\n            {msg.userId === userId ? ( \n              <MessageContent\n                CurrentUser={msg.userId === userId}\n              >\n                  {msg.message}\n              </MessageContent> \n            ) : (\n              <>\n              <span>{msg.userId}</span>\n              <MessageContent\n                CurrentUser={msg.userId === userId}\n              >   \n               {msg.message}\n              </MessageContent> \n              </>\n            )}\n          </div>\n        </ItemContainer>\n      ))}\n    </MessagesBody>\n\n\n    <MessageInputContainer>\n      <MessageForm>  \n        <MessageInput\n          type=\"text\"\n          value={message}\n          placeholder='메세지를 입력해주세요'\n          onKeyDown={e=> (e.key === 'Enter' ? sendMessage(e.target.value) : null)}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n\n        {message.length > 0 && (\n          <SendMessageButton  onClick={sendMessage}>\n               <SendIcon/>\n          </SendMessageButton>  \n        )}     \n\n      </MessageForm>  \n    </MessageInputContainer>\n        \n    </MessagesContainer>\n    </>\n          )}\n  </ChatContainer>\n  );\n}"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,aAAa,EACdC,iBAAiB,EACjBC,iBAAiB,EACjBC,YAAY,EACZC,aAAa,EACbC,cAAc,EACdC,YAAY,EACZC,qBAAqB,EACrBC,WAAW,EACXC,iBAAiB,EACjBC,QAAQ,EACRC,SAAS,QAAS,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,QAAQ,GAAG,uBAAuB;AAExC,eAAe,SAASC,IAAIA,CAAC;EAAEC,UAAU;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}