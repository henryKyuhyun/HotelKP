{"ast":null,"code":"// client/src/redux/authAction.js\nimport axios from 'axios';\nimport { login as loginAction, logout as logoutAction, withdrawal as withdrawalAction } from \"./slice/authSlice\";\nconst apiDeleteAccount = async token => {\n  console.log(\"token: \", token); // 여기에 token 값 출력\n\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  try {\n    const response = await axios.delete('/api/withdrawal', config);\n    console.log(\"response: \", response); // 여기에 서버로부터의 응답 출력\n\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nconst apiLogout = async token => {\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  try {\n    const response = await axios.post('/api/logout', {}, config);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const login = (userRole, userId, token) => {\n  return {\n    type: loginAction.type,\n    payload: {\n      userRole,\n      userId,\n      token\n    }\n  };\n};\nexport const logout = () => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth; // Redux state에서 token 가져오기\n\n  //   return {\n  //     type: logoutAction.type,\n  //   };\n  // };\n  try {\n    // 서버에 로그아웃 요청\n    await apiLogout(token);\n    dispatch({\n      type: logoutAction.type\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const withdrawal = () => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth; // Redux state에서 token 가져오기\n  try {\n    // 서버함수로 회원탈퇴\n    await apiDeleteAccount(token);\n    dispatch({\n      type: withdrawalAction.type\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const setUserRole = newUserRole => {\n  return {\n    type: \"SET_USER_ROLE\",\n    payload: newUserRole\n  };\n};","map":{"version":3,"names":["axios","login","loginAction","logout","logoutAction","withdrawal","withdrawalAction","apiDeleteAccount","token","console","log","config","headers","Authorization","response","delete","data","error","apiLogout","post","userRole","userId","type","payload","dispatch","getState","auth","setUserRole","newUserRole"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/redux/authAction.js"],"sourcesContent":["// client/src/redux/authAction.js\nimport axios from 'axios';\nimport {\n  login as loginAction,\n  logout as logoutAction,\n  withdrawal as withdrawalAction,\n} from \"./slice/authSlice\";\n\nconst apiDeleteAccount = async(token) => {\n  console.log(\"token: \", token); // 여기에 token 값 출력\n\n  const config = {\n    headers: { Authorization: `Bearer ${token}`}\n  };\n\n  try {\n    const response = await axios.delete('/api/withdrawal', config);\n    console.log(\"response: \", response); // 여기에 서버로부터의 응답 출력\n\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst apiLogout = async(token) => {\n  const config = {\n    headers: { Authorization: `Bearer ${token}`}\n  };\n  try {\n    const response = await axios.post('/api/logout',{},config);\n    return response.data;\n  }catch(error){\n    throw error;\n  }\n};\n\nexport const login = (userRole,userId,token) => { \n  return {\n    type: loginAction.type,\n    payload: { userRole,userId,token },\n  };\n};\n\nexport const logout = () => async (dispatch, getState) => {\n  const { token } = getState().auth; // Redux state에서 token 가져오기\n\n//   return {\n//     type: logoutAction.type,\n//   };\n// };\ntry {\n  // 서버에 로그아웃 요청\n  await apiLogout(token);\n  dispatch({type: logoutAction.type});\n} catch (error) {\n  console.error(error);\n}\n};\n\nexport const withdrawal = () => async (dispatch, getState) => {\n  const { token } = getState().auth; // Redux state에서 token 가져오기\n  try {\n    // 서버함수로 회원탈퇴\n    await apiDeleteAccount(token);\n    dispatch({type: withdrawalAction.type});\n  } catch(error){\n    console.error(error);\n  }\n}\n\nexport const setUserRole = (newUserRole) => {\n  return {\n    type: \"SET_USER_ROLE\",\n    payload: newUserRole,\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,KAAK,IAAIC,WAAW,EACpBC,MAAM,IAAIC,YAAY,EACtBC,UAAU,IAAIC,gBAAgB,QACzB,mBAAmB;AAE1B,MAAMC,gBAAgB,GAAG,MAAMC,KAAK,IAAK;EACvCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,KAAK,CAAC,CAAC,CAAC;;EAE/B,MAAMG,MAAM,GAAG;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAG,UAASL,KAAM;IAAC;EAC7C,CAAC;EAED,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMd,KAAK,CAACe,MAAM,CAAC,iBAAiB,EAAEJ,MAAM,CAAC;IAC9DF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,QAAQ,CAAC,CAAC,CAAC;;IAErC,OAAOA,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,MAAMC,SAAS,GAAG,MAAMV,KAAK,IAAK;EAChC,MAAMG,MAAM,GAAG;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAG,UAASL,KAAM;IAAC;EAC7C,CAAC;EACD,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMd,KAAK,CAACmB,IAAI,CAAC,aAAa,EAAC,CAAC,CAAC,EAACR,MAAM,CAAC;IAC1D,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,QAAMC,KAAK,EAAC;IACX,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMhB,KAAK,GAAGA,CAACmB,QAAQ,EAACC,MAAM,EAACb,KAAK,KAAK;EAC9C,OAAO;IACLc,IAAI,EAAEpB,WAAW,CAACoB,IAAI;IACtBC,OAAO,EAAE;MAAEH,QAAQ;MAACC,MAAM;MAACb;IAAM;EACnC,CAAC;AACH,CAAC;AAED,OAAO,MAAML,MAAM,GAAGA,CAAA,KAAM,OAAOqB,QAAQ,EAAEC,QAAQ,KAAK;EACxD,MAAM;IAAEjB;EAAM,CAAC,GAAGiB,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;EAErC;EACA;EACA;EACA;EACA,IAAI;IACF;IACA,MAAMR,SAAS,CAACV,KAAK,CAAC;IACtBgB,QAAQ,CAAC;MAACF,IAAI,EAAElB,YAAY,CAACkB;IAAI,CAAC,CAAC;EACrC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC;EACtB;AACA,CAAC;AAED,OAAO,MAAMZ,UAAU,GAAGA,CAAA,KAAM,OAAOmB,QAAQ,EAAEC,QAAQ,KAAK;EAC5D,MAAM;IAAEjB;EAAM,CAAC,GAAGiB,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACnC,IAAI;IACF;IACA,MAAMnB,gBAAgB,CAACC,KAAK,CAAC;IAC7BgB,QAAQ,CAAC;MAACF,IAAI,EAAEhB,gBAAgB,CAACgB;IAAI,CAAC,CAAC;EACzC,CAAC,CAAC,OAAML,KAAK,EAAC;IACZR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC;EACtB;AACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAIC,WAAW,IAAK;EAC1C,OAAO;IACLN,IAAI,EAAE,eAAe;IACrBC,OAAO,EAAEK;EACX,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}