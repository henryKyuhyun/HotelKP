{"ast":null,"code":"import axios from 'axios';\nconst VAPID_PUBLIC_KEY = process.env.REACT_APP_VAPID_PUBLIC_KEY;\nexport const setupNotification = async loggedInUser => {\n  const Token = sessionStorage.getItem(\"accessToken\");\n  if ('serviceWorker' in navigator) {\n    try {\n      //Service Worker 등록\n      const registration = await navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/service-worker.js`);\n      console.log('Service Worker 등록 성공:', registration);\n\n      // 알림 권한을 체크하고 사용자에게 요청.\n      await navigator.serviceWorker.ready;\n      const permission = await Notification.requestPermission();\n      if (permission === 'granted') {\n        const subscription = await registration.pushManager.subscribe({\n          //수신한 푸시 메시지 사용자에게 보여주어야 한다\n          userVisibleOnly: true,\n          applicationServerKey: VAPID_PUBLIC_KEY\n        });\n        console.log('subscription', subscription); ////\n\n        try {\n          const response = await axios.post('/api/register', {\n            subscription,\n            id: loggedInUser.id\n          }, {\n            headers: {\n              Authorization: `Bearer ${Token}`\n            }\n          });\n          console.log('subscription이 서버에 전송되었습니다.', response);\n        } catch (error) {\n          if (error.response.status === 400) {\n            console.log('이미 알림구독을 하고있는 id입니다.');\n          } else {\n            console.log('subscription 전송 실패:', error);\n          }\n        }\n      }\n    } catch (error) {\n      console.log('Service Worker 등록 실패:', error);\n    }\n    ;\n  }\n};","map":{"version":3,"names":["axios","VAPID_PUBLIC_KEY","process","env","REACT_APP_VAPID_PUBLIC_KEY","setupNotification","loggedInUser","Token","sessionStorage","getItem","navigator","registration","serviceWorker","register","PUBLIC_URL","console","log","ready","permission","Notification","requestPermission","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","response","post","id","headers","Authorization","error","status"],"sources":["/Users/kyuhyunpark/Desktop/HotelByKaaPaaa/HotelKP/client/src/services/notifications.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst VAPID_PUBLIC_KEY = process.env.REACT_APP_VAPID_PUBLIC_KEY;\n\nexport const setupNotification = async (loggedInUser) => {\n    const Token = sessionStorage.getItem(\"accessToken\");\n\n    if ('serviceWorker' in navigator) {\n      try {\n        //Service Worker 등록\n        const registration = await navigator.serviceWorker.register(`${process.env.PUBLIC_URL}/service-worker.js`);\n        console.log('Service Worker 등록 성공:', registration);\n  \n        // 알림 권한을 체크하고 사용자에게 요청.\n        await navigator.serviceWorker.ready;\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n          const subscription = await registration.pushManager.subscribe({\n            //수신한 푸시 메시지 사용자에게 보여주어야 한다\n            userVisibleOnly: true,\n            applicationServerKey: VAPID_PUBLIC_KEY\n          });\n          \n        console.log('subscription',subscription); ////\n\n            try {\n              const response = await axios.post('/api/register', {\n                subscription,\n                id: loggedInUser.id,\n              },{\n                headers:{Authorization:`Bearer ${Token}`}\n              });\n              console.log('subscription이 서버에 전송되었습니다.', response);\n            } catch (error) {\n              if (error.response.status === 400) {\n                console.log('이미 알림구독을 하고있는 id입니다.');\n              } else {\n                console.log('subscription 전송 실패:', error);\n              }\n            }\n          }\n        } catch (error) {\n        console.log('Service Worker 등록 실패:', error);\n      };\n    }\n  };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,gBAAgB,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;AAE/D,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,YAAY,IAAK;EACrD,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC;EAEnD,IAAI,eAAe,IAAIC,SAAS,EAAE;IAChC,IAAI;MACF;MACA,MAAMC,YAAY,GAAG,MAAMD,SAAS,CAACE,aAAa,CAACC,QAAQ,CAAE,GAAEX,OAAO,CAACC,GAAG,CAACW,UAAW,oBAAmB,CAAC;MAC1GC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,YAAY,CAAC;;MAElD;MACA,MAAMD,SAAS,CAACE,aAAa,CAACK,KAAK;MACnC,MAAMC,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;MACzD,IAAIF,UAAU,KAAK,SAAS,EAAE;QAC5B,MAAMG,YAAY,GAAG,MAAMV,YAAY,CAACW,WAAW,CAACC,SAAS,CAAC;UAC5D;UACAC,eAAe,EAAE,IAAI;UACrBC,oBAAoB,EAAExB;QACxB,CAAC,CAAC;QAEJc,OAAO,CAACC,GAAG,CAAC,cAAc,EAACK,YAAY,CAAC,CAAC,CAAC;;QAEtC,IAAI;UACF,MAAMK,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,eAAe,EAAE;YACjDN,YAAY;YACZO,EAAE,EAAEtB,YAAY,CAACsB;UACnB,CAAC,EAAC;YACAC,OAAO,EAAC;cAACC,aAAa,EAAE,UAASvB,KAAM;YAAC;UAC1C,CAAC,CAAC;UACFQ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEU,QAAQ,CAAC;QACrD,CAAC,CAAC,OAAOK,KAAK,EAAE;UACd,IAAIA,KAAK,CAACL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;YACjCjB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;UACrC,CAAC,MAAM;YACLD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEe,KAAK,CAAC;UAC3C;QACF;MACF;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MAChBhB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEe,KAAK,CAAC;IAC7C;IAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}